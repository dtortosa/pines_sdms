
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ###########################################
> ############ VARIABLE SELECTION ###########
> ###########################################
> 
> ## Load ranked variables based on deviance, which is the % of variance explained of each variable for each species according to a glm and the deviance formula of Weisberg 1980; Guisan & Zimmermann 2000. For further information see "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/code/variables/variable_selection/species_clustering/species_clustering.R".
> d2_rank = read.csv("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/code/variables/variable_selection/species_clustering/clustering_results/d2_rank_species_variables.csv", header=TRUE)
> str(d2_rank)
'data.frame':	112 obs. of  27 variables:
 $ species: Factor w/ 112 levels "albicaulis","amamiana",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ bio1   : int  2 10 8 15 9 8 17 9 4 24 ...
 $ bio10  : int  7 21 12 23 20 14 25 17 6 14 ...
 $ bio11  : int  1 5 3 7 1 4 10 2 3 16 ...
 $ bio12  : int  21 7 24 6 14 26 20 18 15 8 ...
 $ bio13  : int  13 1 18 13 25 19 19 13 19 22 ...
 $ bio14  : int  23 2 16 17 6 2 15 3 18 5 ...
 $ bio15  : int  5 17 10 9 17 10 21 1 9 26 ...
 $ bio16  : int  11 6 21 10 26 21 22 14 17 21 ...
 $ bio17  : int  20 3 15 14 8 7 14 6 13 3 ...
 $ bio18  : int  19 14 6 20 7 5 11 8 12 7 ...
 $ bio19  : int  9 24 14 3 10 16 7 12 16 13 ...
 $ bio2   : int  24 19 9 19 13 23 23 24 8 15 ...
 $ bio3   : int  6 16 5 4 21 1 3 4 2 2 ...
 $ bio4   : int  8 4 4 1 2 6 2 11 10 1 ...
 $ bio5   : int  12 26 19 25 16 15 24 22 1 9 ...
 $ bio6   : int  4 8 1 8 3 9 9 7 5 18 ...
 $ bio7   : int  16 9 7 5 5 11 1 15 14 4 ...
 $ bio8   : int  3 11 2 12 4 3 6 5 11 23 ...
 $ bio9   : int  10 25 11 26 11 13 26 19 7 6 ...
 $ carbon : int  17 18 23 21 22 12 16 10 20 10 ...
 $ cec    : int  14 22 22 24 19 20 18 23 22 25 ...
 $ clay   : int  15 12 13 2 24 17 4 16 26 20 ...
 $ depth  : int  26 15 26 18 23 25 5 26 23 17 ...
 $ ph     : int  25 20 25 22 15 18 12 21 21 11 ...
 $ sand   : int  22 13 17 11 18 24 8 20 24 19 ...
 $ silt   : int  18 23 20 16 12 22 13 25 25 12 ...
> 
> ## create per variable : i) Sumatory of the rakings; ii) Number of species for whicht the variable is the top1,2 or 3.
> ranks_compare = as.data.frame(matrix(NA, ncol=5, nrow=1))
> colnames(ranks_compare) <- c("variable", "sum_rank", "number_ones", "number_twoes", "number_threes")
> for(i in 2:ncol(d2_rank)){ #for each variable (first column is species names)
+     
+     #select the [i] variable
+     selected_col = d2_rank[,i]
+     
+     #selcte the name of the [i] varaiable
+     variable =  colnames(d2_rank)[i]
+     
+     #sum the ranks of the [i] variable across species
+     sum_rank = sum(selected_col)
+ 
+     #calculate the umber of species for whicht the variable is the top1,2 or 3.
+     number_ones = length(which(selected_col == 1))
+     number_twoes = length(which(selected_col == 2))
+     number_threes = length(which(selected_col == 3)) 
+ 
+     #bind all   
+     ranks_compare = rbind.data.frame(ranks_compare, 
+             cbind.data.frame(variable, sum_rank, number_ones, number_twoes, number_threes))
+ }
> 
> #delete row with NAs
> ranks_compare = ranks_compare[-1,]
> 
> #check all variables are included
> nrow(ranks_compare) == length(colnames(d2_rank)[which(!colnames(d2_rank) == "species")])
[1] TRUE
> 
> #set variable names in a vector and long variable names in another vector to add long vname variables to ranks_compare (variable will be the variable to merge)
> variable = c(
+     "bio1", 
+     "bio2", 
+     "bio3", 
+     "bio4", 
+     "bio5", 
+     "bio6", 
+     "bio7", 
+     "bio8", 
+     "bio9", 
+     "bio10",
+     "bio11",
+     "bio12",
+     "bio13",
+     "bio14",
+     "bio15",
+     "bio16",
+     "bio17",
+     "bio18",
+     "bio19",
+     "clay", 
+     "silt", 
+     "sand", 
+     "ph",   
+     "cec",  
+     "carbon",
+     "depth")
> long_var_names = c(
+     "Annual Mean Temperature",
+     "Mean Diurnal Range (Mean of monthly (max temp - min temp))",
+     "Isothermality (BIO2/BIO7) (* 100)",
+     "Temperature Seasonality (standard deviation *100)",
+     "Max Temperature of Warmest Month",
+     "Min Temperature of Coldest Month",
+     "Temperature Annual Range (BIO5-BIO6)",
+     "Mean Temperature of Wettest Quarter",
+     "Mean Temperature of Driest Quarter",
+     "Mean Temperature of Warmest Quarter",
+     "Mean Temperature of Coldest Quarter",
+     "Total (annual) moisture",
+     "Moisture of Wettest Month",
+     "Moisture of Driest Month",
+     "Moisture Seasonality (standard deviation)",
+     "Moisture of Wettest Quarter",
+     "Moisture of Driest Quarter",
+     "Moisture of Warmest Quarter",
+     "Moisture of Coldest Quarter",
+     "Clay content (\\%)",
+     "Silt content (\\%)",
+     "Sand content (\\%)",
+     "Ph (index * 10)",
+     "Cation-exchange capacity (CEC; cmolc/kg)",
+     "Organic carbon (g/kg)",
+     "Absolute depth to bedrock (cm)")
> 
> #bind them
> var_names = cbind.data.frame(variable, long_var_names)
> 
> #merge the long names with the ranks_compare data.frame
> ranks_compare = merge(var_names, ranks_compare, by = "variable")
> 
> #order the rows in basis on sum_rank (increasing -> first most explicative variables)
> ranks_compare = ranks_compare[order(ranks_compare$sum_rank, decreasing=FALSE),]
> ranks_compare
   variable                                             long_var_names sum_rank
14     bio4          Temperature Seasonality (standard deviation *100)      593
3     bio11                        Mean Temperature of Coldest Quarter      740
17     bio7                       Temperature Annual Range (BIO5-BIO6)      745
13     bio3                          Isothermality (BIO2/BIO7) (* 100)      809
16     bio6                           Min Temperature of Coldest Month      893
18     bio8                        Mean Temperature of Wettest Quarter     1048
9     bio17                                 Moisture of Driest Quarter     1109
6     bio14                                   Moisture of Driest Month     1161
10    bio18                                Moisture of Warmest Quarter     1180
1      bio1                                    Annual Mean Temperature     1191
11    bio19                                Moisture of Coldest Quarter     1384
22     clay                                         Clay content (\\%)     1418
4     bio12                                    Total (annual) moisture     1471
24       ph                                            Ph (index * 10)     1649
25     sand                                         Sand content (\\%)     1873
2     bio10                        Mean Temperature of Warmest Quarter     1886
12     bio2 Mean Diurnal Range (Mean of monthly (max temp - min temp))     1904
15     bio5                           Max Temperature of Warmest Month     1904
7     bio15                  Moisture Seasonality (standard deviation)     1911
26     silt                                         Silt content (\\%)     1933
19     bio9                         Mean Temperature of Driest Quarter     1935
8     bio16                                Moisture of Wettest Quarter     1994
5     bio13                                  Moisture of Wettest Month     2017
20   carbon                                      Organic carbon (g/kg)     2095
23    depth                             Absolute depth to bedrock (cm)     2211
21      cec                   Cation-exchange capacity (CEC; cmolc/kg)     2258
   number_ones number_twoes number_threes
14          20           21            16
3            6            9            12
17          25           10             6
13          10           18            13
16           2            9             6
18           1            2             4
9            3            6            13
6            8           12             3
10           6            2             6
1            7            3             6
11           3            1             7
22           8            7             4
4            1            2             3
24           0            1             1
25           0            0             0
2            1            1             1
12           1            2             4
15           2            4             3
7            5            0             0
26           0            0             0
19           0            2             2
8            0            0             1
5            1            0             0
20           1            0             0
23           0            0             1
21           1            0             0
> 
> #save results
> write.table(ranks_compare, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/ranks_compare.csv", sep=",", row.names = FALSE, col.names = TRUE)
> 
> ##TABLE 1
> #version of sum rank for the paper
> table_1 = ranks_compare[c(which(ranks_compare$variable %in% paste("bio", 1:11, sep="")), which(ranks_compare$variable %in% paste("bio", 12:19, sep="")), which(!ranks_compare$variable %in% paste("bio", 1:19, sep=""))), c(1:3)] #separate temperature, humidity and soil variables, but remains the order of ranks inside each group.
> colnames(table_1)[1] <- "Bioclim abbreviations"
> colnames(table_1)[2] <- "Variables"
> colnames(table_1)[3] <- "Sum of ranks"
> 
> #reorder columns
> table_1 = table_1[,c(2,1,3)]
> 
> #change to mayusculas bio abreviatures and remove soil name variables from columns abbreviature
> new_abreviations = NULL
> for(i in 1:nrow(table_1)){
+     selected_row = table_1[i,]
+ 
+     if(startsWith(as.vector(selected_row$"Bioclim abbreviations"), "bio")){
+         new_abreviations = append(new_abreviations, paste("BIO", strsplit(as.vector(selected_row$"Bioclim abbreviations"), split="bio")[[1]][2], sep=""))
+     } else { 
+         new_abreviations = append(new_abreviations, NA)
+     }
+     print(paste(as.vector(new_abreviations[i]), "--", as.vector(selected_row$"Bioclim abbreviations"), sep=""))
+ }
[1] "BIO4--bio4"
[1] "BIO11--bio11"
[1] "BIO7--bio7"
[1] "BIO3--bio3"
[1] "BIO6--bio6"
[1] "BIO8--bio8"
[1] "BIO1--bio1"
[1] "BIO10--bio10"
[1] "BIO2--bio2"
[1] "BIO5--bio5"
[1] "BIO9--bio9"
[1] "BIO17--bio17"
[1] "BIO14--bio14"
[1] "BIO18--bio18"
[1] "BIO19--bio19"
[1] "BIO12--bio12"
[1] "BIO15--bio15"
[1] "BIO16--bio16"
[1] "BIO13--bio13"
[1] "NA--clay"
[1] "NA--ph"
[1] "NA--sand"
[1] "NA--silt"
[1] "NA--carbon"
[1] "NA--depth"
[1] "NA--cec"
> table_1$"Bioclim abbreviations" <- new_abreviations
> table_1
                                                    Variables
14          Temperature Seasonality (standard deviation *100)
3                         Mean Temperature of Coldest Quarter
17                       Temperature Annual Range (BIO5-BIO6)
13                          Isothermality (BIO2/BIO7) (* 100)
16                           Min Temperature of Coldest Month
18                        Mean Temperature of Wettest Quarter
1                                     Annual Mean Temperature
2                         Mean Temperature of Warmest Quarter
12 Mean Diurnal Range (Mean of monthly (max temp - min temp))
15                           Max Temperature of Warmest Month
19                         Mean Temperature of Driest Quarter
9                                  Moisture of Driest Quarter
6                                    Moisture of Driest Month
10                                Moisture of Warmest Quarter
11                                Moisture of Coldest Quarter
4                                     Total (annual) moisture
7                   Moisture Seasonality (standard deviation)
8                                 Moisture of Wettest Quarter
5                                   Moisture of Wettest Month
22                                         Clay content (\\%)
24                                            Ph (index * 10)
25                                         Sand content (\\%)
26                                         Silt content (\\%)
20                                      Organic carbon (g/kg)
23                             Absolute depth to bedrock (cm)
21                   Cation-exchange capacity (CEC; cmolc/kg)
   Bioclim abbreviations Sum of ranks
14                  BIO4          593
3                  BIO11          740
17                  BIO7          745
13                  BIO3          809
16                  BIO6          893
18                  BIO8         1048
1                   BIO1         1191
2                  BIO10         1886
12                  BIO2         1904
15                  BIO5         1904
19                  BIO9         1935
9                  BIO17         1109
6                  BIO14         1161
10                 BIO18         1180
11                 BIO19         1384
4                  BIO12         1471
7                  BIO15         1911
8                  BIO16         1994
5                  BIO13         2017
22                  <NA>         1418
24                  <NA>         1649
25                  <NA>         1873
26                  <NA>         1933
20                  <NA>         2095
23                  <NA>         2211
21                  <NA>         2258
> 
> #save table as excel
> write.table(table_1, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/code/variables/variable_selection/species_clustering/table_1_paper.csv", sep=",", col.names=TRUE, row.names=FALSE)
> 
> #convert to a latex table
> require(xtable)
Loading required package: xtable
> print.xtable(xtable(table_1, align="lllc"), include.rownames=FALSE, NA.string="", floating = FALSE, sanitize.text.function=function(x) {x}, hline.after=c(-1, 0, 11, 19, 26)) #hline.after add a hline after the indicated row. 
% latex table generated in R 3.4.3 by xtable 1.8-2 package
% Thu Jul 25 22:52:26 2019
\begin{tabular}{llc}
  \hline
Variables & Bioclim abbreviations & Sum of ranks \\ 
  \hline
Temperature Seasonality (standard deviation *100) & BIO4 & 593 \\ 
  Mean Temperature of Coldest Quarter & BIO11 & 740 \\ 
  Temperature Annual Range (BIO5-BIO6) & BIO7 & 745 \\ 
  Isothermality (BIO2/BIO7) (* 100) & BIO3 & 809 \\ 
  Min Temperature of Coldest Month & BIO6 & 893 \\ 
  Mean Temperature of Wettest Quarter & BIO8 & 1048 \\ 
  Annual Mean Temperature & BIO1 & 1191 \\ 
  Mean Temperature of Warmest Quarter & BIO10 & 1886 \\ 
  Mean Diurnal Range (Mean of monthly (max temp - min temp)) & BIO2 & 1904 \\ 
  Max Temperature of Warmest Month & BIO5 & 1904 \\ 
  Mean Temperature of Driest Quarter & BIO9 & 1935 \\ 
   \hline
Moisture of Driest Quarter & BIO17 & 1109 \\ 
  Moisture of Driest Month & BIO14 & 1161 \\ 
  Moisture of Warmest Quarter & BIO18 & 1180 \\ 
  Moisture of Coldest Quarter & BIO19 & 1384 \\ 
  Total (annual) moisture & BIO12 & 1471 \\ 
  Moisture Seasonality (standard deviation) & BIO15 & 1911 \\ 
  Moisture of Wettest Quarter & BIO16 & 1994 \\ 
  Moisture of Wettest Month & BIO13 & 2017 \\ 
   \hline
Clay content (\%) &  & 1418 \\ 
  Ph (index * 10) &  & 1649 \\ 
  Sand content (\%) &  & 1873 \\ 
  Silt content (\%) &  & 1933 \\ 
  Organic carbon (g/kg) &  & 2095 \\ 
  Absolute depth to bedrock (cm) &  & 2211 \\ 
  Cation-exchange capacity (CEC; cmolc/kg) &  & 2258 \\ 
   \hline
\end{tabular}
> 
> #Copia la tabla en tables_latex.tex y corre este comando
> system("cd /Volumes/GoogleDrive/My\\ Drive/science/phd/nicho_pinus/code/variables/variable_selection/species_clustering; pandoc -s tables_latex.tex -o tables_latex.doc")
> 
> ## Selected variables
> #-Selección de variables: He usado dos criterios: i) La sumatoria de la posición en el deviance ranking de una variable para todas las especies (más alto indica menos explicativo); ii) Número de especies para las que esa variable está en la posición 1,2 ó 3. Me gusta más el primero, porque tiene peso tanto las especies para las que explica mucho como para las que explica poco, por ejmplo: Una variable puede ser el top1 para muchas especies, pero para el resto no explicar nada, ese sería el caso de bio7, que es la variable más explicativa para más especies (25), pero luego su suma de los rankings es 160 mayor respecto de la primera variable (explica menos para muchas especies). Por tanto, la sumatoria de los rankings sería lo más idóneo para seleccionar una variable que se va a usar para reconstruir el estado de TODAS las especies.
>     #-Temperatura -> bio4 (Temperature Seasonality). La sumatoria de los rankings es 593 frente a 740 de bio11 (Mean Temperature of Coldest Quarter), que es la segunda variable más alta de todas. bio4 es el top 1,2,3, para más especies y encima la suma del ranking es claramente menor. bio4 se usó para el cluster 1 y 2, mientras que la otras más cercanas no se usó para ninguno. Además son variables muy parecidas, así que me quedo con la primera según la sumatoria del rank. 
>     #-Humedad -> bio17 (humedad del cuarto más seco). Sumatoria de 1109 frente a los 1161 de bio14 (humedad del mes más seco), que es la segunda variable de humedad más alta. En cuanto al número de especies para las que son el top, están muy igualadas. bio17 se usó para el cluster 2, la otra para ninguno. además son muy parecidas. Me quedo con bio17, que es la que tiene la sumatoria de nrakings más alta.
>     #-Nota: la info sobre las variables usadas para cada cluster está en "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/code/variables/variable_selection/variable_selection_inside_clusters/variable_selection_inside_clusters_v2.R".
> 
> #################################################################
> ############ EXTRACT P50 AND SE OF CLIMATIC VARIABLES ###########
> #################################################################
> 
> #required packages
> require(raster)
Loading required package: raster
Loading required package: sp
> 
> #list species
> list_species = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/code/presences/species.txt", sep="\t", header=T)
> str(list_species)
'data.frame':	114 obs. of  1 variable:
 $ genus.specific_epithet: Factor w/ 114 levels "Pinus albicaulis",..: 1 2 3 4 5 6 7 8 9 10 ...
> summary(list_species)
      genus.specific_epithet
 Pinus albicaulis:  1       
 Pinus amamiana  :  1       
 Pinus aristata  :  1       
 Pinus arizonica :  1       
 Pinus armandii  :  1       
 Pinus attenuata :  1       
 (Other)         :108       
> 
> #extract epithet from species list
> epithet_species_list = NULL
> for(i in 1:nrow(list_species)){
+ 
+     #selected species
+     selected_species = as.vector(list_species[i,])
+ 
+     #extract epithet
+     epithet_species_list = append(epithet_species_list, strsplit(selected_species, split=" ")[[1]][2])
+ }
> summary(is.na(epithet_species_list)) #all false
   Mode   FALSE 
logical     114 
> #check
> if(FALSE){
+     require(tidyverse)
+     paste("Pinus", epithet_species_list, sep=" ") == str_trim(as.vector(list_species[,1])) #the seperated epithet more Pinus are equal to list_species? We use str_trim from tidyverse to remove end spaces in each element of list_species
+ }#it is in false because loading tidyverse lead to load several packages that have a function name "extract", and this gives problems with the extract function of raster. If you want to check run these lines manually
> 
> #remove tecunumanii, jaliscana y discolor. These species are not used for Niche paper. The two first because we should downloadad gbif data now, so we would mix gbif data form 2016 and 2019. The third one was impossible to differentiate from P. cembroides
> epithet_species_list = epithet_species_list[which(!epithet_species_list %in% c("tecunumanii", "jaliscana", "discolor"))]
> #check
> c("tecunumanii", "jaliscana", "discolor") %in% epithet_species_list
[1] FALSE FALSE FALSE
> 
> #function to calculate SE
> se <- function(x) sd(x)/sqrt(length(x))
> 
> #load clay to mask variables
> clay = raster("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/datos/finals/clay.asc")
> 
> ####################
> ##### bio4 #########
> ####################
> bio4 = raster("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/datos/finals/bio4.asc")
> res(bio4)#it is the sd of temperature (remember temepratures en wc 1.4 are multiplides by 10) multiplides by 100, so we add 1000. Therefore 9000 would be a sd of 9 centigrade degrees.
[1] 0.08333333 0.08333333
> 
> #Extract bio4 from species distribution
> if(FALSE){
+ require(raster)
+ median_bio4 = NULL
+ sd_bio4 = NULL
+ se_bio4 = NULL
+ bio4_pines = stack() 
+ for (i in 1:length(epithet_species_list)){
+ 
+     #select the species
+     selected_epithet = epithet_species_list[i]
+ 
+     #load the distribution buffer
+     distri = raster(paste("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/ocurrences/", selected_epithet, "_distribution_buffer.asc", sep=""))
+ 
+     #create a polygon from distributon
+     polygon = rasterToPolygons(distri, fun=function(x){x==1}, n=16, dissolve=TRUE) #esta funcion de raster te transforma un raster completo o una parte del mismo en un poliogno. En nuestro caso solo queremos las celdas con valor=1, es decir, presencias. Por eso ponemos x==1. 
+ 
+     #mask bio4 using the buffer to remove areas outside the extended distribution
+     bio4_cropped = mask(bio4, polygon)
+ 
+     #remove areas without soil
+     bio4_cropped = mask(bio4_cropped, clay)    
+ 
+     #save the raster in the empty stack
+     bio4_pines = stack(bio4_pines, bio4_cropped) 
+     names(bio4_pines)[i] <- paste("bio4_", selected_epithet, sep="")
+ 
+     #extract humidity data and calculate the median
+     median_bio4 = append(median_bio4, median(na.omit(getValues(bio4_cropped))))
+ 
+     #extract sd
+     sd_value = sd(na.omit(getValues(bio4_cropped)))
+ 
+     #extract se
+     se_value = sd_value/sqrt(length(na.omit(getValues(bio4_cropped))))
+ 
+     #save both of them
+     sd_bio4 = append(sd_bio4, sd_value)
+     se_bio4 = append(se_bio4, se_value)
+ }
+ 
+ #check that that data from all species has been extracted
+ nlayers(bio4_pines) == 112 #112, on for each species
+ length(median_bio4) == 112
+ length(sd_bio4) == 112
+ length(se_bio4) == 112
+ 
+ #check that species names are ok
+ paste("bio4_", epithet_species_list, sep="") == names(bio4_pines)
+ 
+ #bind species names and medians
+ medians_bio4 = cbind.data.frame(epithet_species_list, median_bio4)
+ colnames(medians_bio4) <- c("species", "median_bio4")
+ 
+ #bind species and ranges
+ standard_dev_bio4 = cbind.data.frame(epithet_species_list, sd_bio4)
+ colnames(standard_dev_bio4) <- c("species", "sd_bio4")
+ standard_error_bio4 = cbind.data.frame(epithet_species_list, se_bio4)
+ colnames(standard_error_bio4) <- c("species", "se_bio4")
+ 
+ #save medians
+ write.table(medians_bio4, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_medians/medians_bio4.csv", sep=",", col.names = TRUE, row.names = FALSE)
+ 
+ #save sd
+ write.table(standard_dev_bio4, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/sd_bio4.txt", sep="\t", col.names = TRUE, row.names = FALSE)
+ 
+ #save se
+ write.table(standard_error_bio4, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/se_bio4.txt", sep="\t", col.names = TRUE, row.names = FALSE)
+ 
+ #plot
+ pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_medians/plots_climate_ranges_bio4.pdf")
+ for(i in 1:length(epithet_species_list)){
+ 
+     #select the species
+     selected_epithet = epithet_species_list[i]
+ 
+     #load distribution
+     distri = raster(paste("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/ocurrences/", selected_epithet, "_distribution_buffer.asc", sep=""))
+ 
+     #create a polygon from distributon
+     polygon = rasterToPolygons(distri, fun=function(x){x==1}, n=16, dissolve=TRUE) #esta funcion de raster te transforma un raster completo o una parte del mismo en un poliogno. En nuestro caso solo queremos las celdas con valor=1, es decir, presencias. Por eso ponemos x==1. 
+ 
+     #extract the raster of the [i] species
+     raster_bio4 = bio4_pines[[which(names(bio4_pines) == paste("bio4_", selected_epithet, sep=""))]]    
+ 
+     #crop the raster to improve the visualization
+     raster_bio4 = crop(raster_bio4, polygon)
+ 
+     #plot
+     plot(raster_bio4, main=selected_epithet)
+ }
+ dev.off()
+ 
+ #save rasters
+ #writeRaster(bio4_pines, filename="/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/datos/phlyo/climatic_data_phylo/bio4_buffer.tif", options="INTERLEAVE=BAND", overwrite=TRUE)
+ 
+ 
+ 
+ ####################
+ ##### bio17 ########
+ ####################
+ bio17 = raster("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/datos/finals/bio17.asc")
+ res(bio17)
+ 
+ #Extract bio17 from species distribution
+ require(raster)
+ median_bio17 = NULL
+ sd_bio17 = NULL
+ se_bio17 = NULL
+ bio17_pines = stack() 
+ for (i in 1:length(epithet_species_list)){
+ 
+     #select the species
+     selected_epithet = epithet_species_list[i]
+ 
+     #load the distribution buffer
+     distri = raster(paste("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/ocurrences/", selected_epithet, "_distribution_buffer.asc", sep=""))
+ 
+     #create a polygon from distributon
+     polygon = rasterToPolygons(distri, fun=function(x){x==1}, n=16, dissolve=TRUE) #esta funcion de raster te transforma un raster completo o una parte del mismo en un poliogno. En nuestro caso solo queremos las celdas con valor=1, es decir, presencias. Por eso ponemos x==1. 
+ 
+     #mask bio4 using the buffer to remove areas outside the extended distribution
+     bio17_cropped = mask(bio17, polygon)
+ 
+     #remove areas without soil
+     bio17_cropped = mask(bio17_cropped, clay)  
+ 
+     #save the raster in the empty stack
+     bio17_pines = stack(bio17_pines, bio17_cropped) 
+     names(bio17_pines)[i] <- paste("bio17_", selected_epithet, sep="")
+ 
+     #extract humidity data and calculate the median
+     median_bio17 = append(median_bio17, median(na.omit(getValues(bio17_cropped))))
+ 
+     #extract sd
+     sd_value = sd(na.omit(getValues(bio17_cropped)))
+ 
+     #extract se
+     se_value = sd_value/sqrt(length(na.omit(getValues(bio17_cropped))))
+ 
+     #save both of them
+     sd_bio17 = append(sd_bio17, sd_value)
+     se_bio17 = append(se_bio17, se_value)
+ }
+ 
+ #check that that data from all species has been extracted
+ nlayers(bio17_pines) == 112 #112, on for each species
+ length(median_bio17) == 112
+ length(se_bio17) == 112
+ length(sd_bio17) == 112
+ 
+ #check that species names are ok
+ paste("bio17_", epithet_species_list, sep="") == names(bio17_pines)
+ 
+ #bind species names and clim data 
+ medians_bio17 = cbind.data.frame(epithet_species_list, median_bio17)
+ colnames(medians_bio17) <- c("species", "median_bio17")
+ 
+ #bind species and ranges
+ standard_dev_bio17 = cbind.data.frame(epithet_species_list, sd_bio17)
+ colnames(standard_dev_bio17) <- c("species", "sd_bio17")
+ standard_error_bio17 = cbind.data.frame(epithet_species_list, se_bio17)
+ colnames(standard_error_bio17) <- c("species", "se_bio17")
+ 
+ #save medians
+ write.table(medians_bio17, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_medians/medians_bio17.csv", sep=",", col.names = TRUE, row.names = FALSE)
+ 
+ #save sd
+ write.table(standard_dev_bio17, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/sd_bio17.txt", sep="\t", col.names = TRUE, row.names = FALSE)
+ 
+ #save se
+ write.table(standard_error_bio17, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/se_bio17.txt", sep="\t", col.names = TRUE, row.names = FALSE)
+ 
+ #plot
+ pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_medians/plots_climate_ranges_bio17.pdf")
+ for(i in 1:length(epithet_species_list)){
+ 
+     #select the species
+     selected_epithet = epithet_species_list[i]
+ 
+     #load distribution
+     distri = raster(paste("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/ocurrences/", selected_epithet, "_distribution_buffer.asc", sep=""))
+ 
+     #create a polygon from distributon
+     polygon = rasterToPolygons(distri, fun=function(x){x==1}, n=16, dissolve=TRUE) #esta funcion de raster te transforma un raster completo o una parte del mismo en un poliogno. En nuestro caso solo queremos las celdas con valor=1, es decir, presencias. Por eso ponemos x==1. 
+ 
+     #extract the raster of the [i] species
+     raster_bio17 = bio17_pines[[which(names(bio17_pines) == paste("bio17_", selected_epithet, sep=""))]]    
+ 
+     #crop the raster to improve the visualization
+     raster_bio17 = crop(raster_bio17, polygon)
+ 
+     #plot
+     plot(raster_bio17, main=selected_epithet)
+ }
+ dev.off()
+ 
+ #save rasters
+ #writeRaster(bio17_pines, filename="/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/datos/phlyo/climatic_data_phylo/bio17_buffer.tif", options="INTERLEAVE=BAND", overwrite=TRUE)
+ }
> 
> #########################################
> ##### bind both variables of p50 ########
> #########################################
> 
> #load bio4 p50 data
> medians_bio4 = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_medians/medians_bio4.csv", sep=",", header=TRUE)
> 
> #load bio17 p50 data
> medians_bio17 = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_medians/medians_bio17.csv", sep=",", header=TRUE)
> 
> #merge
> climate_medians = merge(medians_bio4, medians_bio17, by="species")
> 
> #save
> write.table(climate_medians, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_medians/climate_medians.csv", col.names = TRUE, row.names = FALSE, sep=",") 
> write.table(climate_medians, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_medians/climate_medians.txt", col.names = TRUE, row.names = FALSE, sep="\t") 
> 
> 
> #########################################
> ##### bind both variables of ranges ########
> #########################################
> 
> #sd
> sd_bio4 = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/sd_bio4.txt", sep="\t", header=TRUE)
> sd_bio17 = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/sd_bio17.txt", sep="\t", header=TRUE)
> 
> #se
> se_bio4 = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/se_bio4.txt", sep="\t", header=TRUE)
> se_bio17 = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/se_bio17.txt", sep="\t", header=TRUE)
> #merge
> climate_sd = merge(sd_bio4, sd_bio17, by="species")
> climate_se = merge(se_bio4, se_bio17, by="species")
> 
> #save
> #sd
> write.table(climate_sd, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/climate_sd.csv", col.names = TRUE, row.names = FALSE, sep=",") 
> write.table(climate_sd, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/climate_sd.txt", col.names = TRUE, row.names = FALSE, sep="\t") 
> #se
> write.table(climate_se, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/climate_se.csv", col.names = TRUE, row.names = FALSE, sep=",") 
> write.table(climate_se, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/climate_se.txt", col.names = TRUE, row.names = FALSE, sep="\t") 
> 
> 
> #######################################################
> ########## RECONSTRUCTION OF ANCESTRAL STATE ##########
> #######################################################
> 
> ## load required packages
> require(ape)
Loading required package: ape

Attaching package: ‘ape’

The following objects are masked from ‘package:raster’:

    rotate, zoom

> require(phytools)
Loading required package: phytools
Loading required package: maps
> require(geiger)
Loading required package: geiger

Attaching package: ‘geiger’

The following object is masked from ‘package:raster’:

    hdr

> require(diversitree)
Loading required package: diversitree
> 
> #load climate data
> climate_medians = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_medians/climate_medians.csv", header=TRUE, sep=",") 
> str(climate_medians)
'data.frame':	112 obs. of  3 variables:
 $ species     : Factor w/ 112 levels "albicaulis","amamiana",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ median_bio4 : num  8086 7168 8340 5290 6825 ...
 $ median_bio17: num  -524.4 -31.9 -585 -584.3 -281.4 ...
> 
> #load climate data
> climate_sd = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/climate_sd.csv", header=TRUE, sep=",") 
> str(climate_sd)
'data.frame':	112 obs. of  3 variables:
 $ species : Factor w/ 112 levels "albicaulis","amamiana",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ sd_bio4 : num  1360 645 595 1360 1829 ...
 $ sd_bio17: num  141.2 74.2 83.7 75.5 111.6 ...
> climate_se = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_ranges/climate_se.csv", header=TRUE, sep=",")
> str(climate_se)
'data.frame':	112 obs. of  3 variables:
 $ species : Factor w/ 112 levels "albicaulis","amamiana",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ se_bio4 : num  7.51 46.9 8.66 12.9 11.76 ...
 $ se_bio17: num  0.779 5.401 1.219 0.716 0.717 ...
> 
> ## cargamos el arbol
> tree<-read.nexus("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/datos/phlyo/phylogeny/FBDl_MCC_commAnc.tre") 
> 
> ## new species icnldued by bianca in tree that we have to drop, and also discolor
> species_to_drop = tree$tip.label[which(!tree$tip.label %in% paste("Pinus_", climate_medians$species, sep=""))]
> 
> ## prune the tree of speceis without seed mass data
> tree_prunned = drop.tip(tree, species_to_drop)
> 
> ## check
> species_to_drop %in% tree_prunned$tip.label
[1] FALSE FALSE FALSE
> 
> ##reorder rows of climate data in basis on tip labels 
> climate_medians = climate_medians[match(tree_prunned$tip.label, paste("Pinus_", climate_medians$species,sep="")),]
> climate_sd = climate_sd[match(tree_prunned$tip.label, paste("Pinus_", climate_sd$species,sep="")),]
> climate_se = climate_se[match(tree_prunned$tip.label, paste("Pinus_", climate_se$species,sep="")),]
> 
> ## save climatic variables in a vector with species names as names
> bio4_vector = climate_medians$median_bio4
> bio17_vector = climate_medians$median_bio17
> 
> ## set names of these variables as species names
> names(bio4_vector) <- paste("Pinus_", climate_medians$species, sep="")
> names(bio17_vector) <- paste("Pinus_", climate_medians$species, sep="")
> 
> ##intra variability as SE of all data across distribution
> intra_var_bio4 = climate_se$se_bio4
> names(intra_var_bio4) <- paste("Pinus_", climate_se$species, sep="")
> intra_var_bio17 = climate_se$se_bio17
> names(intra_var_bio17) <- paste("Pinus_", climate_se$species, sep="")
> 
> ##check order
> names(bio4_vector) == tree_prunned$tip.label
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[106] TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> names(bio17_vector) == tree_prunned$tip.label
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[106] TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> names(intra_var_bio4) == tree_prunned$tip.label
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[106] TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> names(intra_var_bio17) == tree_prunned$tip.label
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[106] TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> 
> ############################################
> #### Correlation between bio17 and bio4 ####
> ############################################
> 
> #correlation without PIC
> test_no_pic = cor.test(bio4_vector, bio17_vector, method="spearman")
Warning message:
In cor.test.default(bio4_vector, bio17_vector, method = "spearman") :
  Cannot compute exact p-value with ties
> 
> #correlation with PIC
> pic_bio4 <- pic(bio4_vector, tree_prunned)
> pic.bio17 <- pic(bio17_vector, tree_prunned) 
> test_pic = cor.test(pic.bio17, pic_bio4, method="spearman")
Warning message:
In cor.test.default(pic.bio17, pic_bio4, method = "spearman") :
  Cannot compute exact p-value with ties
> 
> #plot both variables
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/climatic_var_medians/cors_bio4_bio17.pdf")
> par(mfrow=c(2,2))
> 
> #NO pic
> plot(bio17_vector~bio4_vector, climate_medians, xlab="Median BIO4", ylab="Median BIO17")
> estimate_no_pic = bquote(italic(rho) == .(format(round(test_no_pic$estimate,2))))
> text(x=14000, y=-520, labels = estimate_no_pic, cex=1)
> p_no_pic = bquote(italic(p.value) == .(format(round(test_no_pic$p.value,4))))
> text(x=14000, y=-600, labels = p_no_pic, cex=1)
> 
> #YES PIC
> plot(pic.bio17~pic_bio4, xlab="PIC Median BIO4", ylab="PIC Median BIO17")
> estimate_pic = bquote(italic(rho) == .(format(round(test_pic$estimate,2))))
> text(x=-1500, y=-100, labels = estimate_pic, cex=1)
> p_no_pic = bquote(italic(p.value) == .(format(round(test_pic$p.value,4))))
> text(x=-1500, y=-120, labels = p_no_pic, cex=1)
> 
> dev.off()
null device 
          1 
> 
> ####################################
> #### extintio - speciaiton rate ####
> ###################################
> b_d = birthdeath(tree_prunned) #0.242418
> b_d

Estimation of Speciation and Extinction Rates
            with Birth-Death Models

     Phylogenetic tree: tree_prunned 
        Number of tips: 112 
              Deviance: 9.046676 
        Log-likelihood: -4.523338 
   Parameter estimates:
      d / b = 0.242418   StdErr = 0.189111 
      b - d = 0.05098854   StdErr = 0.008523189 
   (b: speciation rate, d: extinction rate)
   Profile likelihood 95% confidence intervals:
      d / b: [-0.02189003, 0.4374309]
      b - d: [0.04152463, 0.06186523]

> 
> ####################################
> #### times nodes (height) ####
> ###################################
> branching.times(tree_prunned)
       113        114        115        116        117        118        119 
124.507576  71.646792  48.339942  30.151894  25.106221  15.728551  11.906791 
       120        121        122        123        124        125        126 
  9.504544   6.283946   9.317364   6.859546   6.601780   5.737440   5.611687 
       127        128        129        130        131        132        133 
  3.587081   5.742998   8.897423   8.326796   5.456404   4.578232  12.282592 
       134        135        136        137        138        139        140 
  3.039246   1.610970   5.844971  47.376781  17.315555  12.278786  44.442538 
       141        142        143        144        145        146        147 
 34.197713  18.408400  12.118111  21.289959  18.572344   9.403151   8.168276 
       148        149        150        151        152        153        154 
  5.808111   2.389132  16.327209   6.432018   1.287831   7.078939  70.856877 
       155        156        157        158        159        160        161 
 48.657804  35.011683  15.069097   9.898791   9.597479   7.894857   6.576156 
       162        163        164        165        166        167        168 
  1.361865   5.893287   8.509618   7.861219   6.004495   2.785382   3.733054 
       169        170        171        172        173        174        175 
  1.379440   9.034795   3.504611   2.708558  22.106205  11.775567   9.021231 
       176        177        178        179        180        181        182 
  2.597257  13.875039  13.000418  11.841472  11.755876  10.004294   9.411960 
       183        184        185        186        187        188        189 
  8.375786  11.487682  10.414925   9.365491   9.922035   7.721418   6.600772 
       190        191        192        193        194        195        196 
  5.222855   6.831567  11.608474   6.005408  10.259971  10.154872   2.658689 
       197        198        199        200        201        202        203 
 25.549466  19.272215   9.441835  50.815026  41.180958  38.046337  16.785935 
       204        205        206        207        208        209        210 
 30.693307  22.305443  16.607423  40.499021  30.233130  26.093453  21.414489 
       211        212        213        214        215        216        217 
 16.292318   9.756746   3.062537   5.231493  12.901611  12.142250   4.836339 
       218        219        220        221        222        223 
  4.712900  17.366523  15.291439   6.910007   7.604835   2.779037 
> 
> ############################
> #### Señal Filogenética ####
> ############################
> 
> ## bio4
> #lambda
> phylosig(tree_prunned, bio4_vector, method="lambda", test=TRUE) #phytools without intravariability: 0.59, P=0.00831993
$lambda
[1] 0.5874453

$logL
[1] -1056.301

$logL0
[1] -1059.782

$P
[1] 0.00831993

> phylosig(tree_prunned, bio4_vector, method="lambda", test=TRUE, se=intra_var_bio4, nsim=6000) #phytools with intravariability: 0.59, P=0.008320014
$lambda
[1] 0.5873963

$sig2
[1] 127198.5

$logL
[1] -1056.302

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

$logL0
[1] -1059.783

$P
[1] 0.008320014

> fitContinuous(phy = tree_prunned, dat = bio4_vector, model = "lambda", control = list(niter = 100, CI = 0.95), SE=0) #diversitree without intravariability: 0.59
GEIGER-fitted comparative model of continuous data
 fitted ‘lambda’ model parameters:
	lambda = 0.587442
	sigsq = 127208.199649
	z0 = 6106.549261

 model summary:
	log-likelihood = -1056.300632
	AIC = 2118.601263
	AICc = 2118.823485
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 100
	failed iterations = 0
	frequency of best fit = 0.26

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates
> fitContinuous(phy = tree_prunned, dat = bio4_vector, model = "lambda", control = list(niter = 100, CI = 0.95), SE=intra_var_bio4) #diversitree with intravariability: 0.44
GEIGER-fitted comparative model of continuous data
 fitted ‘lambda’ model parameters:
	lambda = 0.587406
	sigsq = 127200.233126
	z0 = 6106.578369

 model summary:
	log-likelihood = -1056.301547
	AIC = 2118.603094
	AICc = 2118.825316
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 100
	failed iterations = 0
	frequency of best fit = 0.17

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates
> 
> #k
> phylosig(tree_prunned, bio4_vector, method="K", nsim=6000, test=TRUE) #0.1578271
$K
[1] 0.1578271

$P
[1] 0.0003333333

> 
> #plot under BM
> obj = contMap(tree_prunned, bio4_vector)
> plot(obj, type="fan")
> 
> ## bio17
> #lambda 
> phylosig(tree_prunned, bio17_vector, method="lambda", test=TRUE) #phytools without intravariability: 0.87; P=4.558942e-13
$lambda
[1] 0.8751591

$logL
[1] -709.2276

$logL0
[1] -735.4208

$P
[1] 4.558942e-13

> phylosig(tree_prunned, bio17_vector, method="lambda", test=TRUE, se=intra_var_bio17, nsim=6000) #phytools with intravariability: 0.87; P=4.550917e-13
$lambda
[1] 0.8752521

$sig2
[1] 516.0805

$logL
[1] -709.2147

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

$logL0
[1] -735.4096

$P
[1] 4.550917e-13

> fitContinuous(phy = tree_prunned, dat = bio17_vector, model = "lambda", control = list(niter = 100, CI = 0.95), SE=0) #diversitree without intravariability: 0.87
GEIGER-fitted comparative model of continuous data
 fitted ‘lambda’ model parameters:
	lambda = 0.875154
	sigsq = 516.232220
	z0 = -507.534232

 model summary:
	log-likelihood = -709.227647
	AIC = 1424.455293
	AICc = 1424.677516
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 100
	failed iterations = 0
	frequency of best fit = 0.15

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates
> fitContinuous(phy = tree_prunned, dat = bio17_vector, model = "lambda", control = list(niter = 100, CI = 0.95), SE=intra_var_bio17) #diversitree with intravariability: 0.87
GEIGER-fitted comparative model of continuous data
 fitted ‘lambda’ model parameters:
	lambda = 0.875257
	sigsq = 516.087080
	z0 = -507.545714

 model summary:
	log-likelihood = -709.214738
	AIC = 1424.429475
	AICc = 1424.651697
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 100
	failed iterations = 0
	frequency of best fit = 0.35

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates
> 
> #k
> phylosig(tree_prunned, bio17_vector, method="K", nsim=6000, test=TRUE) #0.2537013
$K
[1] 0.2537013

$P
[1] 0.0001666667

> 
> #plot under BM
> obj = contMap(tree_prunned, bio17_vector)
> plot(obj, type="fan")
> 
> #########################################
> ####### Comparison AIC of evo models ####
> #########################################
> 
> ## CREATE a FUNCTION with fitContinuous (GEIGER) to COMPARE MODELS white, BM and OU models considering the existence and estimation of intrapespecific variation (SE = NA) and considenrg no existence of intra variation (SE = 0). 
> fitClim=function(trait=c("median_bio4","median_bio17")){
+ 
+     # select the trait
+     trait=match.arg(trait, c("median_bio4","median_bio17"))
+ 
+     # define set of models to compare
+     models=c("white", "BM", "OU", "lambda")
+     summaries=c("white noise", "Brownian motion", "Ornstein-Uhlenbeck", "lambda")
+     
+     ###### ESTIMATING measurement error ######
+     #Set the intraspecific variance (SE) as NA, with the purpose to be estimate. It is to say, it could exist intraspecific variance, but we don't know it. 
+     
+     #empty vectors to sabe lnl and aic
+     aic.se=numeric(length(models)) 
+     lnl.se=numeric(length(models))
+ 
+     # extract values of the trait and add species names
+     climate_variable = climate_medians[,trait] 
+     names(climate_variable) = paste("Pinus_", climate_medians$species, sep="")
+ 
+     #for each model
+     for(m in 1:length(models)){
+ 
+         #Print the name of the model
+         cat("\n\n\n\n\t*** ", paste(toupper(summaries[m]),": fitting ", sep=""), models[m], " with SE *** \n", sep="")
+         
+         #extract SE of the variable form data within species
+         intra_variation = climate_se[, which(colnames(climate_se) == paste("se_", strsplit(trait, split="_")[[1]][2], sep=""))]
+ 
+         #set names of SE
+         names(intra_variation) <- paste("Pinus_", climate_se$species, sep="")
+ 
+         #fit the model
+         tmp=fitContinuous(phy = tree_prunned, dat = climate_variable, SE=intra_variation, model=models[m], control = list(niter = 1000, CI = 0.95, method = c("subplex","L-BFGS-B")), bounds=list(SE=c(0,0.5)), ncores=2)
+             #SE is for intraspecific variation. 
+             #Beware: difficulty in finding the optimal solution is determined by an interaction between the nature and complexity of the likelihood space (which is data- and model-dependent) and the numerical optimizer used to explore the space. There is never a guarantee that the optimal solution is found, but using many random starting points (control$niter) and many optimization methods (control$method) will increase these odds.
+             #Bounds for the relevant parameters of the fitted model may be given through the bounds argument. Bounds may be necessary (particularly under the OU model) if the likelihood surface is characterized by a long, flat ridge which can be exceedingly difficult for optimization methods. Several bounds can be given at a time (e.g., bounds=list(SE=c(0,0.1),alpha=c(0,1)) would constrain measurement error as well as the ’constraint’ parameter of the Ornstein-Uhlenbeck model). Default bounds under the different models are given below.
+             #Models. We only use white, BM and OU, following Quintero & Wiens 2013. None of these models have assumptions that we violated (in constrast with drif for example -> Not valid for ultrametric trees) 
+                 #BM is the Brownian motion model (Felsenstein 1973), which assumes the correlation structure among trait values is proportional to the extent of shared ancestry for pairs of species. Default bounds on the rate parameter are sigsq=c(min=exp(-500),max=exp(100)). The same bounds are applied to all other models, which also estimate sigsq. 
+                 #OU is the Ornstein-Uhlenbeck model (Butler and King 2004), which fits a random walk with a central tendency with an attraction strength proportional to the parameter alpha. The OU model is called the hansen model in ouch, although the way the parameters are fit is slightly different here. Default bounds are alpha = c(min = exp(-500), max = exp(1)). 
+                 #white is a white-noise (non-phylogenetic) model, which assumes data come from a single normal distribution with no covariance structure among species. The variance parameter sigsq takes the same bounds defined under the BM model
+ 
+         #print results
+         print(tmp)
+ 
+         #save aic and lnL        
+         aic.se[m]=tmp$opt$aicc
+         lnl.se[m]=tmp$opt$lnL
+     }
+ 
+     ###### ASSUMING no measurement error ######
+     #Assuming that there is NO intraespecific variance (SE = 0).
+     
+     #empty vectors to sabe lnl and aic
+     aic=numeric(length(models))
+     lnl=numeric(length(models))
+     
+     #for each model
+     for(m in 1:length(models)){
+ 
+         #Print the name of the model
+         cat("\n\n\n\n\t*** ", paste(toupper(summaries[m]),": fitting ", sep=""), models[m], " *** \n", sep="")
+         
+         #fit the model
+         tmp=fitContinuous(phy = tree_prunned, dat = climate_variable, SE=0, model=models[m], control = list(niter = 1000, CI = 0.95, method = c("subplex","L-BFGS-B")), ncores=2) #SE = 0: NO intraespecific variance
+         
+         #print results
+         print(tmp)
+ 
+         #save aic and lnL
+         aic[m]=tmp$opt$aicc
+         lnl[m]=tmp$opt$lnL
+     }
+ 
+     ###### COMPARE AIC ######
+     #set the names of aic and lnL vectors
+     names(aic.se)<-names(lnl.se)<-names(aic)<-names(lnl)<-models
+ 
+     #create a function to calculate differences of aic
+     delta_aic<-function(x) x-x[which(x==min(x))] #This function calcualate the difference in AIC of all models respect the models with lower AIC (min(x))
+     
+     # delta AIC with no measurement error
+     daic=delta_aic(aic)
+     cat("\n\n\n\t\t\t\t*** MODEL COMPARISON: ",trait," *** \n",sep="")
+     cat("\tdelta-AIC values for models assuming no measurement error \t\t\t\t zero indicates the best model\n\n")
+     print(daic, digits=2)
+     
+     # delta AIC with measurement error
+     daic.se=delta_aic(aic.se)
+     cat("\n\n\n\n\t\t\t\t*** MODEL COMPARISON: ",trait," ***\n",sep="")
+     cat("\t\t delta-AIC values for models estimating SE \t\t\t\t zero indicates the best model\n\n")
+     print(daic.se, digits=2)
+     cat("\n\n\n")
+ 
+     #bind all results 
+     res_aicc=rbind(aic, aic.se, daic, daic.se)
+ 
+     #set names
+     rownames(res_aicc)=c("AICc","AICc_SE","dAICc", "dAICc_SE")
+ 
+     #return those results
+     return(res_aicc)
+ } #function taken from page 19 of "https://cran.r-project.org/web/packages/geiger/geiger.pdf"
> 
> 
> ## bio4 
> res_bio4=fitClim(trait = "median_bio4")




	*** WHITE NOISE: fitting white with SE *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘white’ model parameters:
	sigsq = 9691959.386004
	z0 = 5843.026387

 model summary:
	log-likelihood = -1059.783179
	AIC = 2123.566358
	AICc = 2123.676449
	free parameters = 2

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 1.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** BROWNIAN MOTION: fitting BM with SE *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘BM’ model parameters:
	sigsq = 685777.184199
	z0 = 6016.596907

 model summary:
	log-likelihood = -1065.469299
	AIC = 2134.938597
	AICc = 2135.048689
	free parameters = 2

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 1.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** ORNSTEIN-UHLENBECK: fitting OU with SE *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘OU’ model parameters:
	alpha = 0.075744
	sigsq = 1457764.142431
	z0 = 6154.200442

 model summary:
	log-likelihood = -1049.253310
	AIC = 2104.506621
	AICc = 2104.728843
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 0.26

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** LAMBDA: fitting lambda with SE *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘lambda’ model parameters:
	lambda = 0.587417
	sigsq = 127202.906842
	z0 = 6106.577855

 model summary:
	log-likelihood = -1056.301547
	AIC = 2118.603094
	AICc = 2118.825316
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 0.13

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** WHITE NOISE: fitting white *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘white’ model parameters:
	sigsq = 9691952.414059
	z0 = 5843.005975

 model summary:
	log-likelihood = -1059.782272
	AIC = 2123.564545
	AICc = 2123.674636
	free parameters = 2

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 1.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** BROWNIAN MOTION: fitting BM *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘BM’ model parameters:
	sigsq = 685780.756945
	z0 = 6016.575301

 model summary:
	log-likelihood = -1065.467400
	AIC = 2134.934800
	AICc = 2135.044891
	free parameters = 2

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 1.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** ORNSTEIN-UHLENBECK: fitting OU *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘OU’ model parameters:
	alpha = 0.075740
	sigsq = 1457688.704346
	z0 = 6154.175597

 model summary:
	log-likelihood = -1049.251738
	AIC = 2104.503475
	AICc = 2104.725698
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 0.21

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** LAMBDA: fitting lambda *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘lambda’ model parameters:
	lambda = 0.587442
	sigsq = 127208.199649
	z0 = 6106.549261

 model summary:
	log-likelihood = -1056.300632
	AIC = 2118.601263
	AICc = 2118.823485
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 0.28

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates



				*** MODEL COMPARISON: median_bio4 *** 
	delta-AIC values for models assuming no measurement error 				 zero indicates the best model

 white     BM     OU lambda 
    19     30      0     14 




				*** MODEL COMPARISON: median_bio4 ***
		 delta-AIC values for models estimating SE 				 zero indicates the best model

 white     BM     OU lambda 
    19     30      0     14 



> print(res_bio4) #Best model is OU with a difference of AICc of 14 with the second best model, which is lambda (with and without SE (intraespecific variation)). The last model is BM but close to white noise (11) and lambda (16). 
              white         BM       OU     lambda
AICc     2123.67464 2135.04489 2104.726 2118.82349
AICc_SE  2123.67645 2135.04869 2104.729 2118.82532
dAICc      18.94894   30.31919    0.000   14.09779
dAICc_SE   18.94761   30.31985    0.000   14.09647
>     #alpha = 0.075742
> 
> ## bio17
> res_bio17=fitClim(trait = "median_bio17")




	*** WHITE NOISE: fitting white with SE *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘white’ model parameters:
	sigsq = 29558.762750
	z0 = -481.986963

 model summary:
	log-likelihood = -735.409615
	AIC = 1474.819231
	AICc = 1474.929323
	free parameters = 2

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 1.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** BROWNIAN MOTION: fitting BM with SE *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘BM’ model parameters:
	sigsq = 1327.086978
	z0 = -508.661383

 model summary:
	log-likelihood = -715.651440
	AIC = 1435.302880
	AICc = 1435.412972
	free parameters = 2

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 1.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** ORNSTEIN-UHLENBECK: fitting OU with SE *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘OU’ model parameters:
	alpha = 0.036465
	sigsq = 2051.804848
	z0 = -504.322924

 model summary:
	log-likelihood = -706.278740
	AIC = 1418.557480
	AICc = 1418.779702
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 0.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** LAMBDA: fitting lambda with SE *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘lambda’ model parameters:
	lambda = 0.875272
	sigsq = 516.116860
	z0 = -507.545882

 model summary:
	log-likelihood = -709.214738
	AIC = 1424.429475
	AICc = 1424.651697
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 0.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** WHITE NOISE: fitting white *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘white’ model parameters:
	sigsq = 29573.593338
	z0 = -481.964915

 model summary:
	log-likelihood = -735.420795
	AIC = 1474.841589
	AICc = 1474.951681
	free parameters = 2

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 1.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** BROWNIAN MOTION: fitting BM *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘BM’ model parameters:
	sigsq = 1328.983752
	z0 = -508.646402

 model summary:
	log-likelihood = -715.683371
	AIC = 1435.366741
	AICc = 1435.476833
	free parameters = 2

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 1.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** ORNSTEIN-UHLENBECK: fitting OU *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘OU’ model parameters:
	alpha = 0.036495
	sigsq = 2054.473589
	z0 = -504.304229

 model summary:
	log-likelihood = -706.297297
	AIC = 1418.594595
	AICc = 1418.816817
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 0.00

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates




	*** LAMBDA: fitting lambda *** 
GEIGER-fitted comparative model of continuous data
 fitted ‘lambda’ model parameters:
	lambda = 0.875156
	sigsq = 516.237023
	z0 = -507.534262

 model summary:
	log-likelihood = -709.227647
	AIC = 1424.455293
	AICc = 1424.677516
	free parameters = 3

Convergence diagnostics:
	optimization iterations = 1000
	failed iterations = 0
	frequency of best fit = 0.15

 object summary:
	'lik' -- likelihood function
	'bnd' -- bounds for likelihood search
	'res' -- optimization iteration summary
	'opt' -- maximum likelihood parameter estimates



				*** MODEL COMPARISON: median_bio17 *** 
	delta-AIC values for models assuming no measurement error 				 zero indicates the best model

 white     BM     OU lambda 
  56.1   16.7    0.0    5.9 




				*** MODEL COMPARISON: median_bio17 ***
		 delta-AIC values for models estimating SE 				 zero indicates the best model

 white     BM     OU lambda 
  56.1   16.6    0.0    5.9 



> print(res_bio17) #Best model is OU with a difference of AICc of 5 with the second best model, which is lambda (with and without SE (intraespecific variation)). The next model is BM with a difference of 16 (10 respect to lambda) The last model is white noise, very far away (56).
              white         BM       OU      lambda
AICc     1474.95168 1435.47683 1418.817 1424.677516
AICc_SE  1474.92932 1435.41297 1418.780 1424.651697
dAICc      56.13486   16.66002    0.000    5.860699
dAICc_SE   56.14962   16.63327    0.000    5.871995
>     #alpha = 0.036495
> #alpha values are equal with and without SE of intraespecific variability.
> 
> 
> ##TABLE 2 with bio4 and bio17 AICc from differents models. 
> 
> #bind results of both variables
> table_2 = rbind.data.frame(res_bio4, res_bio17)
> 
> #drop row names with AICc, dAICc...
> row.names(table_2) <- NULL
> 
> #create a vector with parameters names. This two-step phase is needed becasue binding two dataste created repetead row.names with .1. Two rows cannot have the same name. 
> row_names =c(
+     "AICc",
+     "AICc SE",
+     "\\textdelta AICc",
+     "\\textdelta AICc SE")
> 
> #create a table with names of parameters and results
> table_2 = cbind.data.frame(
+     rep(row_names, 2),
+     table_2)
> 
> #create a column for the variable
> table_2$variable <- NA
> 
> #give it values
> table_2$variable[1] <- "BIO4"
> table_2$variable[5] <- "BIO17"
> 
> #reorder columns
> table_2 = table_2[,c(6,1,2,5,3,4)]
> 
> #set final names
> colnames(table_2) <- c("Variables", "Parameter", "White noise", "Lambda", "Brownian Motion", "Ornstein-Uhlenbeck")
> 
> #write to excel
> write.table(table_2, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/tables_figures/table_2.csv", sep=",", row.names=FALSE, col.names=TRUE)
> 
> #convert to a latex table
> require(xtable)
> print.xtable(xtable(table_2, align="lllcccc"), include.rownames=FALSE, NA.string="", floating = FALSE, sanitize.text.function=function(x) {x})
% latex table generated in R 3.4.3 by xtable 1.8-2 package
% Thu Jul 25 22:57:39 2019
\begin{tabular}{llcccc}
  \hline
Variables & Parameter & White noise & Lambda & Brownian Motion & Ornstein-Uhlenbeck \\ 
  \hline
BIO4 & AICc & 2123.67 & 2118.82 & 2135.04 & 2104.73 \\ 
   & AICc SE & 2123.68 & 2118.83 & 2135.05 & 2104.73 \\ 
   & \textdelta AICc & 18.95 & 14.10 & 30.32 & 0.00 \\ 
   & \textdelta AICc SE & 18.95 & 14.10 & 30.32 & 0.00 \\ 
  BIO17 & AICc & 1474.95 & 1424.68 & 1435.48 & 1418.82 \\ 
   & AICc SE & 1474.93 & 1424.65 & 1435.41 & 1418.78 \\ 
   & \textdelta AICc & 56.13 & 5.86 & 16.66 & 0.00 \\ 
   & \textdelta AICc SE & 56.15 & 5.87 & 16.63 & 0.00 \\ 
   \hline
\end{tabular}
> 
> #Copia la tabla en tables_latex.tex y corre este comando
> system("cd /Volumes/GoogleDrive/My\\ Drive/science/phd/nicho_pinus/results/phylo_reconstruction/tables_figures; pandoc -s table2_latex.tex -o table2_latex.doc")
> 
> ################################################
> ############  PHYLOGENETIC MONTECARLO ##########
> ################################################
> 
> #Una de las propuestas de Cooper et al 2016 es hacer bootstrap paramétricos simulando datos bajo los diferentes modelos de evolución a comparar. Vamos a usar un "phylogenetic Montecarlo". 
> 
> #Package for phylogenetic montecarlo
> require(pmc) #Con este paquete vamos a correr un "Phylogenetic Monte Carlo" para la selección entre dos modelos: ModeloA más simple y modeloB más complejo. Primero, los parámetros de ambos modelos son estimados usando los datos originales. Entonces, se simulan n datasets (1000 en nuestro caso como hacen en el paper del paquete) siguiendo la evolución que dicta cada modelo con los parámetros que hemos obtenido previamente. Así obtrendemos un rasgo que evoluciona en nuestra filogenia bajo un modelo BM con el mismo sigma que el de WP, y otro rasgo que evoluciona en nuestra filogenia con el mismo signa, theta y alpha que el de WP. Con cada rasgo se reestiman los paramatroes de los DOS modelos (BM y OU), es decir, el rasgo que evoluciona segun BM se usa para ajustar un BM y un OU, mientras que el rasgo que evoluciona bajo OU se usa para ajustar otro BM y otro OU. Se hace un likelihood ratio test entre ambos modelos para cada rasgo, es decir obtendríamos dos valores de LRT en cada simulación: El valor null, ó hipotesis nula, que sería la diferencia de likelihood entre modelo BM y OU asjutados con un rasgo simulado bajo BM; y el valor test ó nuestro test de interés, que sería la diferencia de likelihood entre modelo BM y OU ambos ajustados con un rasgo que sigue evolución OU. Cuanto mayor sea LRT, más apoyo para el segundo modelo, más complejo, OU en nuestro caso. Esperaríamos, que si el rasgo evouciona por OU y no hay un bias del árbol a favor del modelo más complejo, el LRT del rasgo que evoluciona bajo BM será más bajo que el del rasgo que evoluciona bajo OU, es decir, el modelo OU no es mejor para el caso del rasgo que evoluciona bajo BM. Al final tendremos una distribución de LRT bajo BM y OU que podremos comparar. Ojo al detalle que este procesi implica 4 ajusted por maxima verosimiltud (maximum likelihood), mientras que para un AIC solo usas dos. La figura 2 de "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS" explica muy bien esto. 
Loading required package: pmc

Attaching package: ‘pmc’

The following object is masked _by_ ‘.GlobalEnv’:

    tree

> 
> ############################
> #### Geiger - OU.1 BIO4 ####
> ############################
> #OU con un optimo, en este caso no tenemos estado depedencia
> require(geiger)
> 
> ### extract WP data with species as row.names
> dat = climate_medians[,which(colnames(climate_medians) %in% c("species", "median_bio4"))]
> row.names(dat) <- paste("Pinus_", dat$species, sep="")
> dat[,which(colnames(dat) == "species")] <- NULL
> str(dat)
'data.frame':	112 obs. of  1 variable:
 $ median_bio4: num  8086 7168 8340 5290 6825 ...
> 
> ### bind tree and data into tmp
> tmp = treedata(tree_prunned, dat)
> 
> ### extract phylogeny
> phy = tmp$phy
> 
> ### extract WP data with species as row.names
> datos = tmp$data
> 
> ### run the phylo montecarlo
> simulations_ou.1_bio4 = pmc(phy, datos, "BM", "OU", nboot=100, mc.cores=3)
> 
> ### save simulations
> save(simulations_ou.1_bio4, file="/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/rdata/bio_4_geiger_BM_OU.1_nboot_100.rda")
> 
> ### load it
> load("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/rdata/bio_4_geiger_BM_OU.1_nboot_2000.rda")
> 
> ### plot likelihood ratio test between BM (modelA) and OU.1 (modelB) models fitted with data simulated under BM and OU.1 respectively
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/pmc/figures/bio_4_geiger_BM_OU_1_nboot_2000.pdf")
> par(mfrow=c(2,2))
> 
> ## alpha values for data simulated under OU.1
> #comparison BB: BM vs OU.1 model fitted with OU.1-simulated data and the value of alpha (selection strength)
> lr_ou = simulations_ou.1_bio4$test
> 
> #calculate density distribution
> density_lr_OU = density(lr_ou)
> 
> #plot
> plot(density_lr_OU, xlim=c(-0.5,75), ylim=c(0,0.9), xlab="Likelihood ratio test", cex.lab = 1.3, main="")
> 
> #add color to the full area under the curve
> x1 <- min(which(density_lr_OU$x >= 0))  
> x2 <- max(which(density_lr_OU$x <  75))
> with(density_lr_OU, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("black",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_ou = quantile(lr_ou, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_ou[1], quantiles_ou[2]), col="black", lty=2) #No los añado porque podría haber problemas para calcularlos así y no encuentro la función de pmc para ello: "Given the noisy nature of parameters estimated from phylogenies, we recommend that confidence interval should routinely be reported, and to facilitate this, have implemented this as pmc::confidenceIntervals.pow. Confidence intervals could also be estimated from the curvature of the likelihood surface, but these can be unreliable and problematic to compute." From "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS". 
> 
> 
> ## alpha values for data simulated under BM
> #comparison AB: BM vs OU.1 model fitted with BM-simulated data and the value of alpha (selection strength)
> lr_bm = simulations_ou.1_bio4$null
> 
> #calculate density distribution
> density_lr_BM = density(lr_bm)
> 
> #add density plot to the previous plot
> lines(density_lr_BM)
> 
> #add color to the full area under the curve
> x1 <- min(which(density_lr_BM$x >= -0.8))  
> x2 <- max(which(density_lr_BM$x <  13))
> with(density_lr_BM, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("gray",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_BM = quantile(lr_bm, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_BM[1], quantiles_BM[2]), col="black", lty=2)
> 
> #add legen
> #legend(53, 0.85, legend=c("BM", "OU.1"), fill=c("gray", adjustcolor("black",alpha.f=0.65)))
> 
> #add LRT value obtained from real data
> abline(v=c(simulations_ou.1_bio4$lr), col="black", lty=5, lwd=2) #Este valor tiene que estar por encima del percentil 95 del LRT del modeloA (null) y por debajo del percentil 95 del LRT del modeloB (test). Mira la sección Methods-Model selection en "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS".
> #add 95% LR test
> #abline(v=c(quantile(lr_ou, probs=0.95)), col="black", lty=1)
> #abline(v=c(quantile(lr_bm, probs=0.95)), col="black", lty=1) #La proporción de valores simulados mayore que LRT de los datos reales nos da una especie de P.value para el test de selección de modelos. La probabilidad de que la diferencia de likelihood entre modelos (LRT) observada se de bajo el modelo cero. Si cogemos el valor de LRT que es mayor que el 95% de los LRT bajo modeloA, si el LRT observado es mayor que ese threshold, entonces es poco probable que el valor obtenido se haya dado bajo el modeloA (más simple). También podemos calcular el poder del test, la probabilidad de acertar rechazando el modeloA porque los datos vienen del B. Para eso tenemos que usar la distribución de LRTs bajo modelo 1. Si como antes cogemos el valor de LRT mayor que el 95% de LRT simulados bajo modeloB, la cantidad de distribución que queda a la izquierda de ese threshold se aproxima a la probabiidad de rechaza el mdoeloA cuando los datos son producidos por el modeloB. 
> 
> 
> ### plot alpha between data simulated under BM (modelA) and OU.1 (modelB)
> 
> ## alpha values for data simulated under OU.1
> #comparison BB (BM vs OU.1 model fitted with OU.1-simulated data) and the value of alpha (selection strength)
> alpha_ou = simulations_ou.1_bio4$par_dists$value[which(simulations_ou.1_bio4$par_dists$comparison == "BB" & simulations_ou.1_bio4$par_dists$parameter == "alpha")] 
> 
> #calculate density distribution
> density_OU = density(alpha_ou)
> 
> #plot
> plot(density_OU, xlim=c(0,0.39), ylim=c(0,140), , xlab=expression(alpha), cex.lab = 1.3, main="")
> 
> #add color to the full area under the curve
> x1 <- min(which(density_OU$x >= 0))  
> x2 <- max(which(density_OU$x <  0.2))
> with(density_OU, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("black",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_ou = quantile(alpha_ou, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_ou[1], quantiles_ou[2]), col="black", lty=2) #No los añado porque podría haber problemas para calcularlos así y no encuentro la función de pmc para ello: "Given the noisy nature of parameters estimated from phylogenies, we recommend that confidence interval should routinely be reported, and to facilitate this, have implemented this as pmc::confidenceIntervals.pow. Confidence intervals could also be estimated from the curvature of the likelihood surface, but these can be unreliable and problematic to compute." From "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS". 
> 
> ## alpha values for data simulated under BM
> #comparison AB (BM vs OU.1 model fitted with BM-simulated data) and the value of alpha (selection strength)
> alpha_BM = simulations_ou.1_bio4$par_dists$value[which(simulations_ou.1_bio4$par_dists$comparison == "AB" & simulations_ou.1_bio4$par_dists$parameter == "alpha")]
> 
> #calculate density distribution
> density_BM = density(alpha_BM)
> 
> #add density plot to the previous plot
> lines(density_BM)
> 
> #add color to the full area under the curve
> x1 <- min(which(density_BM$x >= -0.2))  
> x2 <- max(which(density_BM$x <  0.2))
> with(density_BM, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("gray",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_BM = quantile(alpha_bm, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_BM[1], quantiles_BM[2]), col="black", lty=2)
> 
> #add legen
> legend(0.27, 133, legend=c("BM", "OU"), fill=c("gray", adjustcolor("black",alpha.f=0.65)))
> 
> #add alpha value obtained from the real data
> abline(v=c(simulations_ou.1_bio4$B$opt$alpha), col="black", lty=5, lwd=2) #Este valor tiene que estar por encima del percentil 95 del LRT del modeloA (null) y por debajo del percentil 95 del LRT del modeloA (test). Mira la sección Methods-Model selection en "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS".
> #add 95% alpha
> #abline(v=c(quantile(alpha_ou, probs=0.95)), col="black", lty=1)
> #abline(v=c(quantile(alpha_BM, probs=0.95)), col="black", lty=1) #Quito estas lineas porque no se si tiene sentido aplicar el approach de poner el 95% de cada parametros en cada modelo, el paper de coop usan este approach con el likelihood ratio test nada más. 
> dev.off()
pdf 
  2 
> 
> 
> #############################
> #### Geiger - OU.1 BIO17 ####
> #############################
> #OU con un optimo, en este caso no tenemos estado depedencia
> require(geiger)
> 
> ### extract WP data with species as row.names
> dat = climate_medians[,which(colnames(climate_medians) %in% c("species", "median_bio17"))]
> row.names(dat) <- paste("Pinus_", dat$species, sep="")
> dat[,which(colnames(dat) == "species")] <- NULL
> str(dat)
'data.frame':	112 obs. of  1 variable:
 $ median_bio17: num  -524.4 -31.9 -585 -584.3 -281.4 ...
> 
> ### bind tree and data into tmp
> tmp = treedata(tree_prunned, dat)
> 
> ### extract phylogeny
> phy = tmp$phy
> 
> ### extract WP data with species as row.names
> datos = tmp$data
> 
> ### run the phylo montecarlo
> simulations_ou.1_bio17 = pmc(phy, datos, "BM", "OU", nboot=100, mc.cores=3)
> 
> ### save simulations
> save(simulations_ou.1_bio17, file="/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/rdata/bio_17_geiger_BM_OU.1_nboot_100.rda")
> 
> ### load it
> load("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/rdata/bio_17_geiger_BM_OU.1_nboot_2000.rda")
> 
> 
> ### plot likelihood ratio test between BM (modelA) and OU.1 (modelB) models fitted with data simulated under BM and OU.1 respectively
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/pmc/figures/bio_17_geiger_BM_OU_1_nboot_2000.pdf")
> par(mfrow=c(2,2))
> 
> ## alpha values for data simulated under OU.1
> #comparison BB (BM vs OU.1 model fitted with OU.1-simulated data) and the value of alpha (selection strength)
> lr_ou = simulations_ou.1_bio17$test
> 
> #calculate density distribution
> density_lr_OU = density(lr_ou)
> 
> #plot
> plot(density_lr_OU, xlim=c(-0.8,45), ylim=c(0,0.9), xlab="Likelihood ratio test", cex.lab = 1.3, main="")
> 
> #add color to the full area under the curve
> x1 <- min(which(density_lr_OU$x >= -0.8))  
> x2 <- max(which(density_lr_OU$x <  75))
> with(density_lr_OU, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("black",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_ou = quantile(lr_ou, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_ou[1], quantiles_ou[2]), col="black", lty=2) #No los añado porque podría haber problemas para calcularlos así y no encuentro la función de pmc para ello: "Given the noisy nature of parameters estimated from phylogenies, we recommend that confidence interval should routinely be reported, and to facilitate this, have implemented this as pmc::confidenceIntervals.pow. Confidence intervals could also be estimated from the curvature of the likelihood surface, but these can be unreliable and problematic to compute." From "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS". 
> 
> 
> ## alpha values for data simulated under BM
> #comparison AB (BM vs OU.1 model fitted with BM-simulated data) and the value of alpha (selection strength)
> lr_bm = simulations_ou.1_bio17$null
> 
> #calculate density distribution
> density_lr_BM = density(lr_bm)
> 
> #add density plot to the previous plot
> lines(density_lr_BM)
> 
> #add color to the full area under the curve
> x1 <- min(which(density_lr_BM$x >= -0.8))  
> x2 <- max(which(density_lr_BM$x <  13))
> with(density_lr_BM, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("gray",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_BM = quantile(lr_bm, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_BM[1], quantiles_BM[2]), col="black", lty=2)
> 
> #add legen
> #legend(53, 0.85, legend=c("BM", "OU.1"), fill=c("gray", adjustcolor("black",alpha.f=0.65)))
> 
> #value obtained from real data
> abline(v=c(simulations_ou.1_bio17$lr), col="black", lty=5, lwd=2) #Este valor tiene que estar por encima del percentil 95 del LRT del modeloA (null) y por debajo del percentil 95 del LRT del modeloB (test). Mira la sección Methods-Model selection en "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS".
> #add 95% LR test
> #abline(v=c(quantile(lr_ou, probs=0.95)), col="black", lty=1)
> #abline(v=c(quantile(lr_bm, probs=0.95)), col="black", lty=1) #La proporción de valores simulados mayore que LRT de los datos reales nos da una especie de P.value para el test de selección de modelos. La probabilidad de que la diferencia de likelihood entre modelos (LRT) observada se de bajo el modelo cero. Si cogemos el valor de LRT que es mayor que el 95% de los LRT bajo modeloA, si el LRT observado es mayor que ese threshold, entonces es poco probable que el valor obtenido se haya dado bajo el modeloA (más simple). También podemos calcular el poder del test, la probabilidad de acertar rechazando el modeloA porque los datos vienen del B. Para eso tenemos que usar la distribución de LRTs bajo modelo 1. Si como antes cogemos el valor de LRT mayor que el 95% de LRT simulados bajo modeloB, la cantidad de distribución que queda a la izquierda de ese threshold se aproxima a la probabiidad de rechaza el mdoeloA cuando los datos son producidos por el modeloB. 
> 
> 
> ### plot alpha between data simulated under BM (modelA) and OU.1 (modelB)
> 
> ## alpha values for data simulated under OU.1
> #comparison BB (OU.1 model fitted with OU.1-simulated data) and the value of alpha (selection strength)
> alpha_ou = simulations_ou.1_bio17$par_dists$value[which(simulations_ou.1_bio17$par_dists$comparison == "BB" & simulations_ou.1_bio17$par_dists$parameter == "alpha")] 
> 
> #calculate density distribution
> density_OU = density(alpha_ou)
> 
> #plot
> plot(density_OU, xlim=c(0,0.12), ylim=c(0,137), , xlab=expression(alpha), cex.lab = 1.3,, main="")
> 
> #add color to the full area under the curve
> x1 <- min(which(density_OU$x >= 0))  
> x2 <- max(which(density_OU$x <  0.2))
> with(density_OU, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("black",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_ou = quantile(alpha_ou, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_ou[1], quantiles_ou[2]), col="black", lty=2) #No los añado porque podría haber problemas para calcularlos así y no encuentro la función de pmc para ello: "Given the noisy nature of parameters estimated from phylogenies, we recommend that confidence interval should routinely be reported, and to facilitate this, have implemented this as pmc::confidenceIntervals.pow. Confidence intervals could also be estimated from the curvature of the likelihood surface, but these can be unreliable and problematic to compute." From "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS". 
> 
> ## alpha values for data simulated under BM
> #comparison AB (BM vs OU.1 model fitted with BM-simulated data) and the value of alpha (selection strength)
> alpha_BM = simulations_ou.1_bio17$par_dists$value[which(simulations_ou.1_bio17$par_dists$comparison == "AB" & simulations_ou.1_bio17$par_dists$parameter == "alpha")]
> 
> #calculate density distribution
> density_BM = density(alpha_BM)
> 
> #add density plot to the previous plot
> lines(density_BM)
> 
> #add color to the full area under the curve
> x1 <- min(which(density_BM$x >= -0.2))  
> x2 <- max(which(density_BM$x <  0.2))
> with(density_BM, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("gray",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_BM = quantile(alpha_bm, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_BM[1], quantiles_BM[2]), col="black", lty=2)
> 
> #add legen
> legend(0.085, 130, legend=c("BM", "OU"), fill=c("gray", adjustcolor("black",alpha.f=0.65)))
> 
> #add alpha vlaue form real data
> abline(v=c(simulations_ou.1_bio17$B$opt$alpha), col="black", lty=5, lwd=2) #Este valor tiene que estar por encima del percentil 95 del LRT del modeloA (null) y por debajo del percentil 95 del LRT del modeloA (test). Mira la sección Methods-Model selection en "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS".
> #add 95% alpha
> #abline(v=c(quantile(alpha_ou, probs=0.95)), col="black", lty=1)
> #abline(v=c(quantile(alpha_BM, probs=0.95)), col="black", lty=1) #Quito estas lineas porque no se si tiene sentido aplicar el approach de poner el 95% de cada parametros en cada modelo, el paper de coop usan este approach con el likelihood ratio test nada más. 
> dev.off()
pdf 
  2 
> 
> ####### FINAL Figure for the paper ########
> ### plot likelihood ratio test between BM (modelA) and OU.1 (modelB) models fitted with data simulated under BM and OU.1 respectively
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/pmc/figures/bio_4_17_geiger_BM_OU_1_nboot_2000.pdf")
> par(mfrow=c(2,2))
> 
> #######BIO4
> ### load it
> load("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/rdata/bio_4_geiger_BM_OU.1_nboot_2000.rda")
> 
> ## alpha values for data simulated under OU.1
> #comparison BB (OU.1 model fitted with OU.1-simulated data) and the value of alpha (selection strength)
> lr_ou = simulations_ou.1_bio4$test
> 
> #calculate density distribution
> density_lr_OU = density(lr_ou)
> 
> #plot
> plot(density_lr_OU, xlim=c(-0.5,75), ylim=c(0,0.9), xlab="Likelihood ratio test", cex.lab = 1.3, main="")
> 
> #add title
> mtext(text=expression(bold("Temperature Seasonality  (BIO4)")), side=3, at=95, line=1.4)
> 
> #add color to the full area under the curve
> x1 <- min(which(density_lr_OU$x >= 0))  
> x2 <- max(which(density_lr_OU$x <  75))
> with(density_lr_OU, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("black",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_ou = quantile(lr_ou, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_ou[1], quantiles_ou[2]), col="black", lty=2) #No los añado porque podría haber problemas para calcularlos así y no encuentro la función de pmc para ello: "Given the noisy nature of parameters estimated from phylogenies, we recommend that confidence interval should routinely be reported, and to facilitate this, have implemented this as pmc::confidenceIntervals.pow. Confidence intervals could also be estimated from the curvature of the likelihood surface, but these can be unreliable and problematic to compute." From "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS". 
> 
> 
> ## alpha values for data simulated under BM
> #comparison AB (OU.1 model fitted with BM-simulated data) and the value of alpha (selection strength)
> lr_bm = simulations_ou.1_bio4$null
> 
> #calculate density distribution
> density_lr_BM = density(lr_bm)
> 
> #add density plot to the previous plot
> lines(density_lr_BM)
> 
> #add color to the full area under the curve
> x1 <- min(which(density_lr_BM$x >= -0.8))  
> x2 <- max(which(density_lr_BM$x <  13))
> with(density_lr_BM, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("gray",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_BM = quantile(lr_bm, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_BM[1], quantiles_BM[2]), col="black", lty=2)
> 
> #add legen
> #legend(53, 0.85, legend=c("BM", "OU.1"), fill=c("gray", adjustcolor("black",alpha.f=0.65)))
> 
> #add 95% LR test
> abline(v=c(simulations_ou.1_bio4$lr), col="black", lty=5, lwd=2) #Este valor tiene que estar por encima del percentil 95 del LRT del modeloA (null) y por debajo del percentil 95 del LRT del modeloB (test). Mira la sección Methods-Model selection en "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS".
> #abline(v=c(quantile(lr_ou, probs=0.95)), col="black", lty=1)
> #abline(v=c(quantile(lr_bm, probs=0.95)), col="black", lty=1) #La proporción de valores simulados mayore que LRT de los datos reales nos da una especie de P.value para el test de selección de modelos. La probabilidad de que la diferencia de likelihood entre modelos (LRT) observada se de bajo el modelo cero. Si cogemos el valor de LRT que es mayor que el 95% de los LRT bajo modeloA, si el LRT observado es mayor que ese threshold, entonces es poco probable que el valor obtenido se haya dado bajo el modeloA (más simple). También podemos calcular el poder del test, la probabilidad de acertar rechazando el modeloA porque los datos vienen del B. Para eso tenemos que usar la distribución de LRTs bajo modelo 1. Si como antes cogemos el valor de LRT mayor que el 95% de LRT simulados bajo modeloB, la cantidad de distribución que queda a la izquierda de ese threshold se aproxima a la probabiidad de rechaza el mdoeloA cuando los datos son producidos por el modeloB. 
> 
> 
> ### plot alpha between data simulated under BM (modelA) and OU.1 (modelB)
> 
> ## alpha values for data simulated under OU.1
> #comparison BB (OU.1 model fitted with OU.1-simulated data) and the value of alpha (selection strength)
> alpha_ou = simulations_ou.1_bio4$par_dists$value[which(simulations_ou.1_bio4$par_dists$comparison == "BB" & simulations_ou.1_bio4$par_dists$parameter == "alpha")] 
> 
> #calculate density distribution
> density_OU = density(alpha_ou)
> 
> #plot
> plot(density_OU, xlim=c(0,0.39), ylim=c(0,140), , xlab=expression(alpha), cex.lab = 1.3, main="")
> 
> #add color to the full area under the curve
> x1 <- min(which(density_OU$x >= 0))  
> x2 <- max(which(density_OU$x <  0.2))
> with(density_OU, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("black",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_ou = quantile(alpha_ou, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_ou[1], quantiles_ou[2]), col="black", lty=2) #No los añado porque podría haber problemas para calcularlos así y no encuentro la función de pmc para ello: "Given the noisy nature of parameters estimated from phylogenies, we recommend that confidence interval should routinely be reported, and to facilitate this, have implemented this as pmc::confidenceIntervals.pow. Confidence intervals could also be estimated from the curvature of the likelihood surface, but these can be unreliable and problematic to compute." From "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS". 
> 
> ## alpha values for data simulated under BM
> #comparison AB (OU.1 model fitted with BM-simulated data) and the value of alpha (selection strength)
> alpha_BM = simulations_ou.1_bio4$par_dists$value[which(simulations_ou.1_bio4$par_dists$comparison == "AB" & simulations_ou.1_bio4$par_dists$parameter == "alpha")]
> 
> #calculate density distribution
> density_BM = density(alpha_BM)
> 
> #add density plot to the previous plot
> lines(density_BM)
> 
> #add color to the full area under the curve
> x1 <- min(which(density_BM$x >= -0.2))  
> x2 <- max(which(density_BM$x <  0.2))
> with(density_BM, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("gray",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_BM = quantile(alpha_bm, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_BM[1], quantiles_BM[2]), col="black", lty=2)
> 
> #add legen
> legend(0.27, 133, legend=c("BM", "OU"), fill=c("gray", adjustcolor("black",alpha.f=0.65)))
> 
> #add 95% LR test
> abline(v=c(simulations_ou.1_bio4$B$opt$alpha), col="black", lty=5, lwd=2) #Este valor tiene que estar por encima del percentil 95 del LRT del modeloA (null) y por debajo del percentil 95 del LRT del modeloA (test). Mira la sección Methods-Model selection en "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS".
> #abline(v=c(quantile(alpha_ou, probs=0.95)), col="black", lty=1)
> #abline(v=c(quantile(alpha_BM, probs=0.95)), col="black", lty=1) #Quito estas lineas porque no se si tiene sentido aplicar el approach de poner el 95% de cada parametros en cada modelo, el paper de coop usan este approach con el likelihood ratio test nada más. 
> 
> 
> ####BIO17 
> 
> ### load it
> load("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/rdata/bio_17_geiger_BM_OU.1_nboot_2000.rda")
> 
> 
> ## alpha values for data simulated under OU.1
> #comparison BB (OU.1 model fitted with OU.1-simulated data) and the value of alpha (selection strength)
> lr_ou = simulations_ou.1_bio17$test
> 
> #calculate density distribution
> density_lr_OU = density(lr_ou)
> 
> #plot
> plot(density_lr_OU, xlim=c(-0.8,45), ylim=c(0,0.9), xlab="Likelihood ratio test", cex.lab = 1.3, main="")
> 
> #add title
> mtext(text=expression(bold("Moisture of Driest Quarter  (BIO17)")), side=3, at=57, line=1.4)
> 
> #add color to the full area under the curve
> x1 <- min(which(density_lr_OU$x >= -0.8))  
> x2 <- max(which(density_lr_OU$x <  75))
> with(density_lr_OU, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("black",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_ou = quantile(lr_ou, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_ou[1], quantiles_ou[2]), col="black", lty=2) #No los añado porque podría haber problemas para calcularlos así y no encuentro la función de pmc para ello: "Given the noisy nature of parameters estimated from phylogenies, we recommend that confidence interval should routinely be reported, and to facilitate this, have implemented this as pmc::confidenceIntervals.pow. Confidence intervals could also be estimated from the curvature of the likelihood surface, but these can be unreliable and problematic to compute." From "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS". 
> 
> 
> ## alpha values for data simulated under BM
> #comparison AB (OU.1 model fitted with BM-simulated data) and the value of alpha (selection strength)
> lr_bm = simulations_ou.1_bio17$null
> 
> #calculate density distribution
> density_lr_BM = density(lr_bm)
> 
> #add density plot to the previous plot
> lines(density_lr_BM)
> 
> #add color to the full area under the curve
> x1 <- min(which(density_lr_BM$x >= -0.8))  
> x2 <- max(which(density_lr_BM$x <  13))
> with(density_lr_BM, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("gray",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_BM = quantile(lr_bm, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_BM[1], quantiles_BM[2]), col="black", lty=2)
> 
> #add legen
> #legend(53, 0.85, legend=c("BM", "OU.1"), fill=c("gray", adjustcolor("black",alpha.f=0.65)))
> 
> #add 95% LR test
> abline(v=c(simulations_ou.1_bio17$lr), col="black", lty=5, lwd=2) #Este valor tiene que estar por encima del percentil 95 del LRT del modeloA (null) y por debajo del percentil 95 del LRT del modeloB (test). Mira la sección Methods-Model selection en "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS".
> #abline(v=c(quantile(lr_ou, probs=0.95)), col="black", lty=1)
> #abline(v=c(quantile(lr_bm, probs=0.95)), col="black", lty=1) #La proporción de valores simulados mayore que LRT de los datos reales nos da una especie de P.value para el test de selección de modelos. La probabilidad de que la diferencia de likelihood entre modelos (LRT) observada se de bajo el modelo cero. Si cogemos el valor de LRT que es mayor que el 95% de los LRT bajo modeloA, si el LRT observado es mayor que ese threshold, entonces es poco probable que el valor obtenido se haya dado bajo el modeloA (más simple). También podemos calcular el poder del test, la probabilidad de acertar rechazando el modeloA porque los datos vienen del B. Para eso tenemos que usar la distribución de LRTs bajo modelo 1. Si como antes cogemos el valor de LRT mayor que el 95% de LRT simulados bajo modeloB, la cantidad de distribución que queda a la izquierda de ese threshold se aproxima a la probabiidad de rechaza el mdoeloA cuando los datos son producidos por el modeloB. 
> 
> 
> ### plot alpha between data simulated under BM (modelA) and OU.1 (modelB)
> 
> ## alpha values for data simulated under OU.1
> #comparison BB (OU.1 model fitted with OU.1-simulated data) and the value of alpha (selection strength)
> alpha_ou = simulations_ou.1_bio17$par_dists$value[which(simulations_ou.1_bio17$par_dists$comparison == "BB" & simulations_ou.1_bio17$par_dists$parameter == "alpha")] 
> 
> #calculate density distribution
> density_OU = density(alpha_ou)
> 
> #plot
> plot(density_OU, xlim=c(0,0.12), ylim=c(0,137), , xlab=expression(alpha), cex.lab = 1.3,, main="")
> 
> #add color to the full area under the curve
> x1 <- min(which(density_OU$x >= 0))  
> x2 <- max(which(density_OU$x <  0.2))
> with(density_OU, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("black",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_ou = quantile(alpha_ou, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_ou[1], quantiles_ou[2]), col="black", lty=2) #No los añado porque podría haber problemas para calcularlos así y no encuentro la función de pmc para ello: "Given the noisy nature of parameters estimated from phylogenies, we recommend that confidence interval should routinely be reported, and to facilitate this, have implemented this as pmc::confidenceIntervals.pow. Confidence intervals could also be estimated from the curvature of the likelihood surface, but these can be unreliable and problematic to compute." From "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS". 
> 
> ## alpha values for data simulated under BM
> #comparison AB (OU.1 model fitted with BM-simulated data) and the value of alpha (selection strength)
> alpha_BM = simulations_ou.1_bio17$par_dists$value[which(simulations_ou.1_bio17$par_dists$comparison == "AB" & simulations_ou.1_bio17$par_dists$parameter == "alpha")]
> 
> #calculate density distribution
> density_BM = density(alpha_BM)
> 
> #add density plot to the previous plot
> lines(density_BM)
> 
> #add color to the full area under the curve
> x1 <- min(which(density_BM$x >= -0.2))  
> x2 <- max(which(density_BM$x <  0.2))
> with(density_BM, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col=adjustcolor("gray",alpha.f=0.65)))
> 
> #plot 95CI
> #quantiles_BM = quantile(alpha_bm, prob=c(0.025, 0.975))
> #abline(v=c(quantiles_BM[1], quantiles_BM[2]), col="black", lty=2)
> 
> #add legen
> #legend(0.085, 130, legend=c("BM", "OU"), fill=c("gray", adjustcolor("black",alpha.f=0.65)))
> 
> #add 95% LR test
> abline(v=c(simulations_ou.1_bio17$B$opt$alpha), col="black", lty=5, lwd=2) #Este valor tiene que estar por encima del percentil 95 del LRT del modeloA (null) y por debajo del percentil 95 del LRT del modeloA (test). Mira la sección Methods-Model selection en "IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS".
> #abline(v=c(quantile(alpha_ou, probs=0.95)), col="black", lty=1)
> #abline(v=c(quantile(alpha_BM, probs=0.95)), col="black", lty=1) #Quito estas lineas porque no se si tiene sentido aplicar el approach de poner el 95% de cada parametros en cada modelo, el paper de coop usan este approach con el likelihood ratio test nada más. 
> dev.off()
pdf 
  2 
> 
> 
> 
> ################################
> #### phylogenetic half-life ####
> ################################
> 
> #max height of the tree
> height_tree = max(nodeHeights(tree_prunned)[,2])
> 
> #t[1/2] for BIO4 and BIO17
> t_1_2_bio4 = log(2)/0.076
> t_1_2_bio17 = log(2)/0.036
> 
> #difference between t[1/2] and max height
> t_1_2_bio4/height_tree
[1] 0.07325143
> t_1_2_bio17/height_tree #El timepo que tarda una especie que entra en nu nuevo nicho en llegar a la mitad de camino hacia su nuevo óptimo esperado. Si ese valor es muy pequeo en relación con la altura del árbol, entonces la evolución hacia el rago optimo es rápida y las correlaciones filogeneitcas residuales son debiles y hay poca influencia de los valores antiguos del rasgo. A nosotros nos sale un valor muy bajo respecto de la altura del árbol, pero hay que tener en cuenta que la estrcutura del arbul afecta al valor de alfa, ciertas formas de árbol pueden dar lugar a valores más altos de alfa independientemente del rasgo que estés mirando, y t_1_2 se calcula con alfa, así que tenemos esos sesgos. Cooper et al 2016 vieron que con alfa menor de 1, BM y OU son prácticamente indiferenciables. 
[1] 0.1546419
> 
> 
> #####################################
> ####### Extract ancestal state ######
> #####################################
> 
> ####### OU and BM in Comare 4.6 #########
> #extract species names
> species_names = paste("Pinus_", climate_medians$species, sep="")
> 
> #write species names
> write.table(species_names, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/compare4.6_data/compare_species_names.txt", sep="\t", col.names = FALSE, row.names =  FALSE, quote=FALSE) #We don't want quotes because these files will be copied to compare. quote: a logical value (‘TRUE’ or ‘FALSE’) or a numeric vector.  If ‘TRUE’, any character or factor columns will be surrounded by double quotes.  If a numeric vector, its elements are taken as the indices of columns to quote.  In both cases, row and column names are quoted if they are written.  If ‘FALSE’, nothing is quoted.
> 
> #bind climatic data to SE estimates (0 in our cases for all speices because we have not intraspecies data)
> climate_medians$species == climate_se$species
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[106] TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> compare_bio4 = paste(climate_medians$median_bio4, "<", climate_se$se_bio4, ">", sep="")
> compare_bio17 = paste(climate_medians$median_bio17, "<", climate_se$se_bio17, ">", sep="")
> 
> #write variables
> write.table(compare_bio4, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/compare4.6_data/compare_bio4.txt", sep="\t", col.names = FALSE, row.names =  FALSE, quote=FALSE) #YOU HAVE TO DROP " FROM THE FILE
> write.table(compare_bio17, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/compare4.6_data/compare_bio17.txt", sep="\t", col.names = FALSE, row.names =  FALSE, quote=FALSE) #YOU HAVE TO DROP " FROM THE FILE
> 
> #save the tree prunned for compare 4.6
> write.tree(tree_prunned, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/compare4.6_data/FBDl_MCC_commAnc_prunned.tree") #You have to copy hasta el ";", no etas espacio, sino no funciona
> 
> 
> #En "/Volumes/GoogleDrive/My Drive/science/software/Comp46bExec" pinchas startForm.class para activar compare. Le das a main window. 
> 
> #Copias todos estos archivos creados con al código de justo arriba en Taxon names (names), Taxon means (rasgos) y Enter Phylogeny. Indicas que son 112 taxa, 1 rasgo y 1 filogenia. Hay que indicar que si queremos usar los SE dentro de especie ó asumir que la variación dentro de especie es desconocida. En este caso incluímos los valores de SE como variabilidad intraespecífica. Seleccionar PGLS-ancestros y exeecute.   
> 
> #Correr modelo: 
>     #BM: Linear model which is the option by default. Not select specyfing alpha. Nothing else. 
>     #OU:Luego Exponential model, specyfing Alpha, pon el valor de alfa de bio4  ó bio17 redondeados a dos decimales (0.076 y 0.036 respectivamente), 100 iteraciones y run (he comprobado el resultado con 1000 interaciones en ambas variablws y sale exactamente lo mismo; REVISADO JULIO 2019). Asú se corre un OU en comapre4.6. Esto se ha seguido de Guerrero et al.,... Wiens ., 2013 ("https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3710863/")
> 
> #Le das a guardar en un archivo llamado "compare_res_bioX_XX.txt". De ese archivo copias la parte de "Trait #1: Ancestral state estimates" y la pegas en un excel, le das a pegar con el importador de datos (se hace en el boton que surge al pegar como el de mantener-quitar formato). Así te separará cada columna. Solo falta añadir a "Adj." el "SE" que queda en la siguiente columna (es SE adjusted) y guardar como .csv.
> 
> #load results of OU with SE intraespecífica (alpha = 0.076 for bio4 and 0.036 for bio17)
> anc_ou_bio4 = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/compare_results/anc_bio4_ou.csv", sep=",", header=TRUE)
> str(anc_ou_bio4)
'data.frame':	111 obs. of  4 variables:
 $ Node  : Factor w/ 111 levels "114","115","116",..: 111 1 2 3 4 5 6 7 8 9 ...
 $ State : num  6154 6166 6222 6420 6534 ...
 $ SE    : num  1763 5078 5062 4901 4732 ...
 $ Adj.SE: num  1763 533 533 554 577 ...
> anc_ou_bio17 = read.table("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/compare_results/anc_bio17_ou.csv", sep=",", header=TRUE)
> str(anc_ou_bio17)
'data.frame':	111 obs. of  4 variables:
 $ Node  : Factor w/ 111 levels "114","115","116",..: 111 1 2 3 4 5 6 7 8 9 ...
 $ State : num  -500 -516 -474 -440 -428 ...
 $ SE    : num  67.7 276.2 258.7 222.8 202.7 ...
 $ Adj.SE: num  67.7 40.1 51.6 68.6 75.8 ...
> 
> #change names of root by 112+1 (as notation of ape)
> #bio4
> first_node = length(tree_prunned$tip.label) + 1
> levels(anc_ou_bio4$Node) = c(levels(anc_ou_bio4$Node), eval(first_node))
> anc_ou_bio4$Node[which(anc_ou_bio4$Node == "Root")] <-  length(tree_prunned$tip.label) + 1
> anc_ou_bio4$Node = droplevels(anc_ou_bio4$Node)
> #bio17
> first_node = length(tree_prunned$tip.label) + 1
> levels(anc_ou_bio17$Node) = c(levels(anc_ou_bio17$Node), eval(first_node))
> anc_ou_bio17$Node[which(anc_ou_bio17$Node == "Root")] <-  length(tree_prunned$tip.label) + 1
> anc_ou_bio17$Node = droplevels(anc_ou_bio17$Node)
> 
> #change the name of Node to nodo1 for mergin with data.frame of node-species numbers
> colnames(anc_ou_bio4)[which(colnames(anc_ou_bio4) == "Node")] <- "nodo1" 
> colnames(anc_ou_bio17)[which(colnames(anc_ou_bio17) == "Node")] <- "nodo1" 
> 
> ##### BM y OU con ace (ape) #######
> ## bio4
> # BM
> ml_recon_bio4 = ace(x=bio4_vector, phy=tree_prunned, type="continuous", method = "ML", CI = TRUE, model="BM", marginal=FALSE) 
>     #If type = "continuous", the default model is Brownian motion where characters evolve randomly following a random walk. This model can be fitted by residual maximum likelihood (the default), maximum likelihood (Felsenstein 1973, Schluter et al. 1997), least squares (method = "pic", Felsenstein 1985), or generalized least squares (method = "GLS", Martins and Hansen 1997, Cunningham et al. 1998). In the last case, the specification of phy and model are actually ignored: it is instead given through a correlation structure with the option corStruct. 
>     #In the setting method = "ML" and model = "BM" (this used to be the default until ape 3.0-7) the maximum likelihood estimation is done simultaneously on the ancestral values and the variance of the Brownian motion process; these estimates are then used to compute the confidence intervals in the standard way. The REML method first estimates the ancestral value at the root (aka, the phylogenetic mean), then the variance of the Brownian motion process is estimated by optimizing the residual log-likelihood. The ancestral values are finally inferred from the likelihood function giving these two parameters. If method = "pic" or "GLS", the confidence intervals are computed using the expected variances under the model, so they depend only on the tree. 
>     #It could be shown that, with a continous character, REML results in unbiased estimates of the variance of the Brownian motion process while ML gives a downward bias. Therefore the former is recommanded.
>     #By default, the likelihood of the different ancestral states of discrete characters are computed with a joint estimation procedure using a procedure similar to the one described in Pupko et al. (2000). If marginal = TRUE, a marginal estimation procedure is used (this was the only choice until ape 3.1- 1). With this method, the likelihood values at a given node are computed using only the information from the tips (and branches) descending from this node. With the joint estimation, all information is used for each node. The difference between these two methods is further explained in Felsenstein (2004, pp. 259-260) and in Yang (2006, pp. 121-126). The present implementation of the joint estimation uses a “two-pass” algorithm which is much faster than stochastic mapping while the estimates of both methods are very close.
> reml_recon_bio4 = ace(x=bio4_vector, phy=tree_prunned, type="continuous", method = "REML", CI = TRUE, model="BM", marginal=FALSE)
> pgls_recon_bio4 = ace(x=bio4_vector, phy=tree_prunned, type="continuous", method = "GLS", CI = TRUE, model="BM", marginal=FALSE, corStruct = corBrownian(1, phy = tree_prunned))
>     #ML no estima el 95CI y además el manual de ape dice que ML puede dar estimar con bias en rasgos continuos. Ademá
> 
> # BM with reconstruct (APE)
> ml_recontruct_bio4 = reconstruct(bio4_vector, tree_prunned, method = "ML", alpha = NULL, CI = TRUE)
> reml_recontruct_bio4 = reconstruct(bio4_vector, tree_prunned, method = "REML", alpha = NULL, CI = TRUE)
> pgl_recontruct_bio4 = reconstruct(bio4_vector, tree_prunned, method = "GLS", alpha = NULL, CI = TRUE)
> 
> #compare ancestral states of BM all models
> ml_recon_bio4$ace - reml_recon_bio4$ace
         113          114          115          116          117          118 
 -173.555641    45.215158   -45.026695  -847.504653  -943.876896 -1786.539462 
         119          120          121          122          123          124 
-2134.994064 -1996.110927 -2250.099948 -2520.789408  -330.798074  -257.985576 
         125          126          127          128          129          130 
  -73.799805   -89.815740  -653.849670  -198.579746 -2957.543541 -3702.194608 
         131          132          133          134          135          136 
-5961.105613 -5750.826398   -36.563445   827.640739  -612.851786  -183.042404 
         137          138          139          140          141          142 
   -6.270809 -1547.502220 -2384.892775   263.002436    29.091771 -1253.982608 
         143          144          145          146          147          148 
-1906.819081   976.828435   804.375799  -116.205333    69.886202   326.728197 
         149          150          151          152          153          154 
  958.969306   887.293381  -638.377499  -229.926886  2316.655363  -395.461949 
         155          156          157          158          159          160 
 -865.535035   141.612779   821.541684  1590.674960  1551.558704  1047.488383 
         161          162          163          164          165          166 
  591.891373  1154.241335  1146.436054  1732.387002  1649.213386  2469.994153 
         167          168          169          170          171          172 
 2526.093886  3308.193238  3638.441414   129.627567    59.243904  -158.155512 
         173          174          175          176          177          178 
  654.114879    68.014978  -264.481570   655.250997  1447.967038  1388.330979 
         179          180          181          182          183          184 
 1829.913902  1885.887311  2478.023398  2581.567750  2786.119864  1970.613482 
         185          186          187          188          189          190 
 2292.832690  2447.344125  1994.898471  1640.252003  1820.104556  1569.535898 
         191          192          193          194          195          196 
 2540.820734   763.031792  1674.283409   -62.072611  -111.514980 -2459.963244 
         197          198          199          200          201          202 
-3060.313589 -2567.374224 -1842.864740   -53.900453  -276.538068  -273.814389 
         203          204          205          206          207          208 
 -892.505560   -53.456521   240.101814   640.355153   360.303621  -312.456646 
         209          210          211          212          213          214 
 -362.826961 -1140.042910  -693.051129  -537.543702   643.315188 -1228.123208 
         215          216          217          218          219          220 
 -477.845703  -402.706331  1523.339151  -768.247709 -2165.712535 -2525.541383 
         221          222          223 
-4638.835346 -2946.364822  4346.450352 
> ml_recon_bio4$ace - pgls_recon_bio4$ace
         113          114          115          116          117          118 
 -173.569328    45.045934   -45.180843  -847.607455  -943.973377 -1786.602389 
         119          120          121          122          123          124 
-2135.068090 -1996.168312 -2250.138439 -2520.881712  -330.886793  -258.073831 
         125          126          127          128          129          130 
  -73.888318   -89.902814  -653.893862  -198.650290 -2957.634422 -3702.279392 
         131          132          133          134          135          136 
-5961.161817 -5750.873505   -36.602083   827.631274  -612.858357  -183.058468 
         137          138          139          140          141          142 
   -6.422926 -1547.567195 -2384.943129   262.868635    29.003484 -1254.019004 
         143          144          145          146          147          148 
-1906.828675   976.758663   804.315336  -116.239107    69.857065   326.709228 
         149          150          151          152          153          154 
  958.962288   887.243012  -638.391808  -229.931372  2316.633244  -395.451422 
         155          156          157          158          159          160 
 -865.541305   141.587305   821.508122  1590.631443  1551.516266  1047.460505 
         161          162          163          164          165          166 
  591.870755  1154.236943  1146.420311  1732.351816  1649.181060  2469.980473 
         167          168          169          170          171          172 
 2526.091509  3308.171947  3638.434087   129.598193    59.225536  -158.170577 
         173          174          175          176          177          178 
  654.055803    67.981930  -264.508002   655.244405  1447.857913  1388.211610 
         179          180          181          182          183          184 
 1829.792683  1885.767280  2477.940014  2581.494070  2786.059631  1970.500227 
         185          186          187          188          189          190 
 2292.736745  2447.261891  1994.818194  1640.201145  1820.065652  1569.508131 
         191          192          193          194          195          196 
 2540.775026   762.906605  1674.232313   -62.216154  -111.658333 -2459.988645 
         197          198          199          200          201          202 
-3060.335729 -2567.403750 -1842.877129   -53.929768  -276.575876  -273.849734 
         203          204          205          206          207          208 
 -892.522317   -53.474242   240.098591   640.357261   360.267605  -312.489051 
         209          210          211          212          213          214 
 -362.860822 -1140.091035  -693.094858  -537.569977   643.306108 -1228.134389 
         215          216          217          218          219          220 
 -477.885812  -402.744076  1523.328091  -768.267291 -2165.767495 -2525.594502 
         221          222          223 
-4638.859251 -2946.386682  4346.451580 
> reml_recon_bio4$ace - pgls_recon_bio4$ace
         113          114          115          116          117          118 
-0.013686695 -0.169224373 -0.154148051 -0.102801918 -0.096480988 -0.062926606 
         119          120          121          122          123          124 
-0.074026128 -0.057385662 -0.038491046 -0.092304228 -0.088718707 -0.088254743 
         125          126          127          128          129          130 
-0.088513555 -0.087073507 -0.044191679 -0.070544136 -0.090880914 -0.084784678 
         131          132          133          134          135          136 
-0.056203909 -0.047106756 -0.038638003 -0.009464915 -0.006571646 -0.016063692 
         137          138          139          140          141          142 
-0.152117551 -0.064975089 -0.050354014 -0.133800611 -0.088287351 -0.036396686 
         143          144          145          146          147          148 
-0.009593978 -0.069772061 -0.060463196 -0.033773615 -0.029136807 -0.018968839 
         149          150          151          152          153          154 
-0.007018102 -0.050369636 -0.014308891 -0.004486687 -0.022119916  0.010527421 
         155          156          157          158          159          160 
-0.006269935 -0.025474110 -0.033562056 -0.043517130 -0.042438653 -0.027877986 
         161          162          163          164          165          166 
-0.020617833 -0.004392376 -0.015743368 -0.035185960 -0.032326285 -0.013680174 
         167          168          169          170          171          172 
-0.002376973 -0.021291232 -0.007327231 -0.029374256 -0.018367660 -0.015064474 
         173          174          175          176          177          178 
-0.059076145 -0.033047834 -0.026432017 -0.006591466 -0.109124438 -0.119369349 
         179          180          181          182          183          184 
-0.121219679 -0.120030373 -0.083384104 -0.073679957 -0.060233064 -0.113255370 
         185          186          187          188          189          190 
-0.095945145 -0.082234074 -0.080277623 -0.050857715 -0.038903448 -0.027767159 
         191          192          193          194          195          196 
-0.045708212 -0.125186966 -0.051095774 -0.143543011 -0.143353181 -0.025401027 
         197          198          199          200          201          202 
-0.022139517 -0.029526743 -0.012388798 -0.029315544 -0.037807896 -0.035345829 
         203          204          205          206          207          208 
-0.016756577 -0.017720958 -0.003223424  0.002108337 -0.036015833 -0.032405103 
         209          210          211          212          213          214 
-0.033860900 -0.048124107 -0.043729143 -0.026274427 -0.009080410 -0.011181762 
         215          216          217          218          219          220 
-0.040108885 -0.037745730 -0.011060657 -0.019582158 -0.054960507 -0.053118780 
         221          222          223 
-0.023904801 -0.021860256  0.001228202 
> 
> ml_recontruct_bio4$ace - reml_recontruct_bio4$ace
113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
213 214 215 216 217 218 219 220 221 222 223 
  0   0   0   0   0   0   0   0   0   0   0 
> ml_recontruct_bio4$ace - pgl_recontruct_bio4$ace
113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
213 214 215 216 217 218 219 220 221 222 223 
  0   0   0   0   0   0   0   0   0   0   0 
> pgl_recontruct_bio4$ace - reml_recontruct_bio4$ace
113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
213 214 215 216 217 218 219 220 221 222 223 
  0   0   0   0   0   0   0   0   0   0   0 
> 
> ml_recontruct_bio4$ace - ml_recon_bio4$ace
         113          114          115          116          117          118 
  173.569326   -45.045934    45.180843   847.607454   943.973377  1786.602389 
         119          120          121          122          123          124 
 2135.068090  1996.168312  2250.138439  2520.881712   330.886793   258.073831 
         125          126          127          128          129          130 
   73.888318    89.902814   653.893862   198.650290  2957.634422  3702.279392 
         131          132          133          134          135          136 
 5961.161817  5750.873505    36.602083  -827.631274   612.858357   183.058468 
         137          138          139          140          141          142 
    6.422926  1547.567195  2384.943129  -262.868635   -29.003484  1254.019004 
         143          144          145          146          147          148 
 1906.828675  -976.758663  -804.315336   116.239107   -69.857065  -326.709228 
         149          150          151          152          153          154 
 -958.962288  -887.243012   638.391808   229.931372 -2316.633244   395.451421 
         155          156          157          158          159          160 
  865.541305  -141.587305  -821.508122 -1590.631443 -1551.516266 -1047.460505 
         161          162          163          164          165          166 
 -591.870755 -1154.236943 -1146.420311 -1732.351816 -1649.181060 -2469.980473 
         167          168          169          170          171          172 
-2526.091509 -3308.171947 -3638.434087  -129.598193   -59.225536   158.170577 
         173          174          175          176          177          178 
 -654.055803   -67.981930   264.508002  -655.244405 -1447.857913 -1388.211610 
         179          180          181          182          183          184 
-1829.792683 -1885.767280 -2477.940014 -2581.494070 -2786.059631 -1970.500227 
         185          186          187          188          189          190 
-2292.736745 -2447.261891 -1994.818194 -1640.201145 -1820.065652 -1569.508131 
         191          192          193          194          195          196 
-2540.775026  -762.906605 -1674.232313    62.216154   111.658333  2459.988645 
         197          198          199          200          201          202 
 3060.335729  2567.403750  1842.877129    53.929768   276.575876   273.849734 
         203          204          205          206          207          208 
  892.522317    53.474242  -240.098591  -640.357261  -360.267605   312.489051 
         209          210          211          212          213          214 
  362.860822  1140.091035   693.094858   537.569977  -643.306108  1228.134389 
         215          216          217          218          219          220 
  477.885812   402.744076 -1523.328091   768.267291  2165.767495  2525.594502 
         221          222          223 
 4638.859251  2946.386682 -4346.451580 
> reml_recontruct_bio4$ace - reml_recon_bio4$ace
         113          114          115          116          117          118 
 0.013685010  0.169223930  0.154147900  0.102801868  0.096480958  0.062926596 
         119          120          121          122          123          124 
 0.074026125  0.057385659  0.038491045  0.092304226  0.088718706  0.088254742 
         125          126          127          128          129          130 
 0.088513555  0.087073506  0.044191679  0.070544135  0.090880913  0.084784677 
         131          132          133          134          135          136 
 0.056203909  0.047106756  0.038637994  0.009464914  0.006571645  0.016063690 
         137          138          139          140          141          142 
 0.152117407  0.064975062  0.050354000  0.133800467  0.088287269  0.036396660 
         143          144          145          146          147          148 
 0.009593965  0.069772033  0.060463178  0.033773610  0.029136804  0.018968837 
         149          150          151          152          153          154 
 0.007018101  0.050369622  0.014308888  0.004486686  0.022119910 -0.010527819 
         155          156          157          158          159          160 
 0.006269782  0.025474044  0.033562046  0.043517128  0.042438651  0.027877985 
         161          162          163          164          165          166 
 0.020617833  0.004392376  0.015743367  0.035185959  0.032326284  0.013680174 
         167          168          169          170          171          172 
 0.002376973  0.021291231  0.007327232  0.029374252  0.018367660  0.015064474 
         173          174          175          176          177          178 
 0.059076124  0.033047828  0.026432014  0.006591466  0.109124434  0.119369347 
         179          180          181          182          183          184 
 0.121219678  0.120030372  0.083384104  0.073679957  0.060233064  0.113255369 
         185          186          187          188          189          190 
 0.095945144  0.082234073  0.080277622  0.050857715  0.038903448  0.027767159 
         191          192          193          194          195          196 
 0.045708211  0.125186965  0.051095773  0.143543010  0.143353180  0.025401027 
         197          198          199          200          201          202 
 0.022139474  0.029526718  0.012388790  0.029315405  0.037807823  0.035345772 
         203          204          205          206          207          208 
 0.016756561  0.017720924  0.003223407 -0.002108347  0.036015758  0.032405070 
         209          210          211          212          213          214 
 0.033860879  0.048124096  0.043729139  0.026274425  0.009080410  0.011181762 
         215          216          217          218          219          220 
 0.040108883  0.037745728  0.011060657  0.019582158  0.054960502  0.053118775 
         221          222          223 
 0.023904799  0.021860254 -0.001228205 
> pgl_recontruct_bio4$ace - pgls_recon_bio4$ace #REML y PGLS y ML (con reconstruct) iguales en todos los casos.
          113           114           115           116           117 
-1.684988e-06 -4.426302e-07 -1.510134e-07 -5.002403e-08 -3.037894e-08 
          118           119           120           121           122 
-9.793439e-09 -3.909008e-09 -2.403794e-09 -1.115041e-09 -1.546141e-09 
          123           124           125           126           127 
-5.193215e-10 -4.756657e-10 -3.001333e-10 -2.937668e-10 -1.364242e-10 
          128           129           130           131           132 
-3.537934e-10 -1.286026e-09 -1.127773e-09 -4.565663e-10 -3.346941e-10 
          133           134           135           136           137 
-8.407369e-09 -1.106855e-09 -4.120011e-10 -2.532033e-09 -1.443086e-07 
          138           139           140           141           142 
-2.658180e-08 -1.461012e-08 -1.438029e-07 -8.255574e-08 -2.634170e-08 
          143           144           145           146           147 
-1.292756e-08 -2.778233e-08 -1.837361e-08 -4.548383e-09 -3.231435e-09 
          148           149           150           151           152 
-1.698936e-09 -5.184120e-10 -1.401622e-08 -3.330570e-09 -4.274625e-10 
          153           154           155           156           157 
-5.576567e-09 -3.981831e-07 -1.529306e-07 -6.661412e-08 -1.089302e-08 
          158           159           160           161           162 
-2.305569e-09 -1.920853e-09 -8.549250e-10 -4.301910e-10  4.474714e-10 
          163           164           165           166           167 
-3.146852e-10 -1.154149e-09 -9.040377e-10 -3.033165e-10  3.269633e-10 
          168           169           170           171           172 
-1.741682e-10  2.783054e-10 -4.014510e-09 -4.001777e-10 -1.164153e-10 
          173           174           175           176           177 
-2.102479e-08 -5.898983e-09 -3.520654e-09 -4.083631e-10 -4.062713e-09 
          178           179           180           181           182 
-2.467459e-09 -1.223270e-09 -1.176431e-09 -5.939000e-10 -4.170033e-10 
          183           184           185           186           187 
-2.710294e-10 -1.068202e-09 -7.180461e-10 -5.279617e-10 -5.811671e-10 
          188           189           190           191           192 
-1.045919e-10  5.775291e-11  1.318767e-10 -1.377884e-10 -1.641638e-09 
          193           194           195           196           197 
-3.337846e-10 -1.013177e-09 -1.006811e-09  1.746230e-10 -4.363937e-08 
          198           199           200           201           202 
-2.475826e-08 -7.909875e-09 -1.389071e-07 -7.302242e-08 -5.715447e-08 
          203           204           205           206           207 
-1.610533e-08 -3.410696e-08 -1.721401e-08 -1.012359e-08 -7.597464e-08 
          208           209           210           211           212 
-3.339483e-08 -2.084835e-08 -1.028548e-08 -4.549292e-09 -1.560693e-09 
          213           214           215           216           217 
-1.364242e-10 -4.383764e-10 -2.366505e-09 -2.038178e-09 -3.747118e-10 
          218           219           220           221           222 
-3.856258e-10 -5.788024e-09 -4.356480e-09 -1.100489e-09 -1.482476e-09 
          223 
-2.510660e-09 
> 
> #OU 
> pgls_ou_bio4 = reconstruct(bio4_vector, tree_prunned, method = "GLS_OU", alpha = 0.076, CI = TRUE)
> pgls_ous_bio4 = reconstruct(bio4_vector, tree_prunned, method = "GLS_OUS", alpha = 0.076, CI = TRUE) #"GLS_OU" and "GLS_OUS" differs in the fact that "GLS_OUS" assume that the process starts from the optimum, while the root state has to be estimated for "GLS_OU", which may rise some issues (see reconstruct 219 Royer-Carenzi and Didier, 2016). Users may provide the attractive strength parameter alpha, for these two models. Users may provide the attractive strength parameter alpha, for these two models. "GLS_ABM", "GLS_OU" and "GLS_OUS" are all fitted by generalized least squares (Royer-Carenzi and Didier, 2016).
>     #Note: GLS_OU may lead to aberrant reconstructions.
> 
> ## bio17
> # BM
> ml_recon_bio17 = ace(x=bio17_vector, phy=tree_prunned, type="continuous", method = "ML", CI = TRUE, model="BM", marginal=FALSE) 
Warning message:
In sqrt(diag(solve(h))) : NaNs produced
> reml_recon_bio17 = ace(x=bio17_vector, phy=tree_prunned, type="continuous", method = "REML", CI = TRUE, model="BM", marginal=FALSE)
Warning message:
In sqrt(diag(solve(h))) : NaNs produced
> pgls_recon_bio17 = ace(x=bio17_vector, phy=tree_prunned, type="continuous", method = "GLS", CI = TRUE, model="BM", marginal=FALSE, corStruct = corBrownian(1, phy = tree_prunned))
>     #ML no estima el 95CI y además el manual de ape dice que ML puede dar estimar con bias en rasgos continuos: "It could be shown that, with a continous character, REML results in unbiased estimates of the variance of the Brownian motion process while ML gives a downward bias. Therefore the former is recommanded". 
> 
> # BM with reconstruct (APE)
> ml_recontruct_bio17 = reconstruct(bio17_vector, tree_prunned, method = "ML", alpha = NULL, CI = TRUE)
> reml_recontruct_bio17 = reconstruct(bio17_vector, tree_prunned, method = "REML", alpha = NULL, CI = TRUE)
> pgl_recontruct_bio17 = reconstruct(bio17_vector, tree_prunned, method = "GLS", alpha = NULL, CI = TRUE)
> 
> #compare ancestral states of BM all models
> ml_recon_bio17$ace - reml_recon_bio17$ace
         113          114          115          116          117          118 
  26.6908841   43.1721820   -0.4562445  -15.1423235  -22.8857044  -54.9082564 
         119          120          121          122          123          124 
 -66.2842313  -41.5992556  -15.7929289  -69.3113390  -32.5312075  -49.7470025 
         125          126          127          128          129          130 
 -18.2373841  -11.2136081  -14.4448257  -35.6912684  -55.9927280  -58.4124072 
         131          132          133          134          135          136 
 -18.8728736   -6.2353361  -10.5246271  -10.5826592  -24.5272494    9.8834331 
         137          138          139          140          141          142 
  -1.2998420  -17.7306991  -18.0287675  100.4164676  103.2260434   96.1492798 
         143          144          145          146          147          148 
  63.0628021  110.0853205  106.7451820   43.2478391   33.9004044   17.7281736 
         149          150          151          152          153          154 
   6.7143040   92.9631550  -11.1067180   20.6643403   17.8098351    9.8978497 
         155          156          157          158          159          160 
   9.8981091   57.8925858  108.4611514   63.1581523   62.5406002   39.4604683 
         161          162          163          164          165          166 
  30.3906148   16.0864408   27.3886646   42.6443823   59.2429518   19.2423953 
         167          168          169          170          171          172 
   8.1405415   12.3755277    0.6520461   43.2513350  -23.6007604  -32.8521281 
         173          174          175          176          177          178 
  41.3896140   26.6725165   36.4283549   -9.3255517    0.8175929   -0.5339012 
         179          180          181          182          183          184 
  -8.3120586   -5.5915212   -4.5238051    5.8523282   -1.0849534    7.3187802 
         185          186          187          188          189          190 
  -5.1742445   -1.4448678   -6.4404864    5.6241236    1.0511214    4.6721596 
         191          192          193          194          195          196 
  -9.8829248   -5.0978708  -15.4991802   12.4746786  -14.4236936    8.1386550 
         197          198          199          200          201          202 
 -53.7695442  -52.5725418  -22.6887119    5.3748913   63.1507126   79.0228757 
         203          204          205          206          207          208 
  69.8685844   89.3814929   85.2804930   66.8415089  -50.6898268  -91.6011040 
         209          210          211          212          213          214 
-110.2825897 -133.8041160 -148.3886185  -63.7418797   -5.0654544  -25.1723853 
         215          216          217          218          219          220 
-126.8192418 -118.7701714   -6.5429379   26.0993156 -100.6929591  -84.0486932 
         221          222          223 
 -13.6058750  -30.8599319   15.8502034 
> ml_recon_bio17$ace - pgls_recon_bio17$ace
         113          114          115          116          117          118 
  26.6806742   43.1545018   -0.4752184  -15.1491017  -22.8916985  -54.9140118 
         119          120          121          122          123          124 
 -66.2889182  -41.6024967  -15.7946242  -69.3157705  -32.5349973  -49.7507342 
         125          126          127          128          129          130 
 -18.2411006  -11.2172534  -14.4466083  -35.6942057  -55.9969601  -58.4161956 
         131          132          133          134          135          136 
 -18.8745841   -6.2366682  -10.5285405  -10.5840803  -24.5281266    9.8812162 
         137          138          139          140          141          142 
  -1.3185666  -17.7389038  -18.0347191  100.4053102  103.2180727   96.1449438 
         143          144          145          146          147          148 
  63.0605776  110.0783403  106.7388363   43.2452068   33.8978573   17.7267282 
         149          150          151          152          153          154 
   6.7136609   92.9574854  -11.1092034   20.6637015   17.8068365    9.8911406 
         155          156          157          158          159          160 
   9.8877110   57.8807295  108.4542085   63.1523194   62.5349024   39.4565691 
         161          162          163          164          165          166 
  30.3877163   16.0858145   27.3862257   42.6394484   59.2384996   19.2391869 
         167          168          169          170          171          172 
   8.1391280   12.3739605    0.6514471   43.2478668  -23.6028015  -32.8538229 
         173          174          175          176          177          178 
  41.3805872   26.6687377   36.4257285   -9.3263430    0.8068932   -0.5452487 
         179          180          181          182          183          184 
  -8.3237639   -5.6030967   -4.5306309    5.8467012   -1.0891103    7.3078766 
         185          186          187          188          189          190 
  -5.1833214   -1.4526069   -6.4482399    5.6194024    1.0474820    4.6696671 
         191          192          193          194          195          196 
  -9.8875372   -5.1090655  -15.5036500   12.4625936  -14.4357349    8.1364906 
         197          198          199          200          201          202 
 -53.7739935  -52.5764771  -22.6922292    5.3666826   63.1437137   79.0153666 
         203          204          205          206          207          208 
  69.8616591   89.3731048   85.2750638   66.8387474  -50.6950825  -91.6034449 
         209          210          211          212          213          214 
-110.2858334 -133.8084658 -148.3915943  -63.7427850   -5.0657410  -25.1728862 
         215          216          217          218          219          220 
-126.8220452 -118.7729659   -6.5454453   26.0990709 -100.6979130  -84.0533928 
         221          222          223 
 -13.6099502  -30.8642127   15.8504680 
> reml_recon_bio17$ace - pgls_recon_bio17$ace
          113           114           115           116           117 
-0.0102098745 -0.0176801636 -0.0189738127 -0.0067782178 -0.0059941334 
          118           119           120           121           122 
-0.0057554591 -0.0046868888 -0.0032411256 -0.0016953007 -0.0044315065 
          123           124           125           126           127 
-0.0037897638 -0.0037316735 -0.0037164862 -0.0036452952 -0.0017826010 
          128           129           130           131           132 
-0.0029372230 -0.0042320579 -0.0037884021 -0.0017104839 -0.0013320575 
          133           134           135           136           137 
-0.0039133594 -0.0014211072 -0.0008771962 -0.0022168402 -0.0187246105 
          138           139           140           141           142 
-0.0082046212 -0.0059515462 -0.0111573568 -0.0079706971 -0.0043359878 
          143           144           145           146           147 
-0.0022245740 -0.0069801875 -0.0063456831 -0.0026322919 -0.0025471197 
          148           149           150           151           152 
-0.0014454434 -0.0006430618 -0.0056696355 -0.0024854458 -0.0006388358 
          153           154           155           156           157 
-0.0029986780 -0.0067091026 -0.0103980427 -0.0118562151 -0.0069429152 
          158           159           160           161           162 
-0.0058329133 -0.0056978188 -0.0038992422 -0.0028985159 -0.0006263408 
          163           164           165           166           167 
-0.0024389051 -0.0049339486 -0.0044521923 -0.0032083438 -0.0014135114 
          168           169           170           171           172 
-0.0015672492 -0.0005989062 -0.0034681769 -0.0020410647 -0.0016947533 
          173           174           175           176           177 
-0.0090267517 -0.0037787686 -0.0026263980 -0.0007913291 -0.0106996221 
          178           179           180           181           182 
-0.0113474988 -0.0117052870 -0.0115755458 -0.0068258567 -0.0056269966 
          183           184           185           186           187 
-0.0041569541 -0.0109035569 -0.0090768836 -0.0077391440 -0.0077535069 
          188           189           190           191           192 
-0.0047211586 -0.0036394055 -0.0024924416 -0.0046124017 -0.0111947395 
          193           194           195           196           197 
-0.0044697670 -0.0120850217 -0.0120412743 -0.0021644082 -0.0044492148 
          198           199           200           201           202 
-0.0039353037 -0.0035173383 -0.0082086421 -0.0069988579 -0.0075091248 
          203           204           205           206           207 
-0.0069252274 -0.0083881458 -0.0054291917 -0.0027614569 -0.0052556831 
          208           209           210           211           212 
-0.0023409077 -0.0032436617 -0.0043497937 -0.0029757901 -0.0009053574 
          213           214           215           216           217 
-0.0002866454 -0.0005008431 -0.0028033924 -0.0027945568 -0.0025074468 
          218           219           220           221           222 
-0.0002446814 -0.0049538826 -0.0046995989 -0.0040752370 -0.0042808158 
          223 
 0.0002645587 
> 
> ml_recontruct_bio17$ace - reml_recontruct_bio17$ace
113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
213 214 215 216 217 218 219 220 221 222 223 
  0   0   0   0   0   0   0   0   0   0   0 
> ml_recontruct_bio17$ace - pgl_recontruct_bio17$ace
113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
213 214 215 216 217 218 219 220 221 222 223 
  0   0   0   0   0   0   0   0   0   0   0 
> pgl_recontruct_bio17$ace - reml_recontruct_bio17$ace
113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 
  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
213 214 215 216 217 218 219 220 221 222 223 
  0   0   0   0   0   0   0   0   0   0   0 
> 
> ml_recontruct_bio17$ace - ml_recon_bio17$ace
         113          114          115          116          117          118 
 -26.6806742  -43.1545018    0.4752184   15.1491017   22.8916985   54.9140118 
         119          120          121          122          123          124 
  66.2889182   41.6024967   15.7946242   69.3157705   32.5349973   49.7507342 
         125          126          127          128          129          130 
  18.2411006   11.2172534   14.4466083   35.6942057   55.9969601   58.4161956 
         131          132          133          134          135          136 
  18.8745841    6.2366682   10.5285405   10.5840803   24.5281266   -9.8812162 
         137          138          139          140          141          142 
   1.3185666   17.7389038   18.0347191 -100.4053102 -103.2180727  -96.1449438 
         143          144          145          146          147          148 
 -63.0605776 -110.0783403 -106.7388364  -43.2452068  -33.8978573  -17.7267282 
         149          150          151          152          153          154 
  -6.7136609  -92.9574854   11.1092034  -20.6637015  -17.8068365   -9.8911406 
         155          156          157          158          159          160 
  -9.8877110  -57.8807296 -108.4542085  -63.1523194  -62.5349024  -39.4565691 
         161          162          163          164          165          166 
 -30.3877163  -16.0858145  -27.3862257  -42.6394484  -59.2384996  -19.2391869 
         167          168          169          170          171          172 
  -8.1391280  -12.3739605   -0.6514471  -43.2478668   23.6028015   32.8538229 
         173          174          175          176          177          178 
 -41.3805872  -26.6687377  -36.4257285    9.3263430   -0.8068932    0.5452487 
         179          180          181          182          183          184 
   8.3237639    5.6030967    4.5306309   -5.8467012    1.0891103   -7.3078766 
         185          186          187          188          189          190 
   5.1833214    1.4526069    6.4482399   -5.6194024   -1.0474820   -4.6696671 
         191          192          193          194          195          196 
   9.8875372    5.1090655   15.5036500  -12.4625936   14.4357349   -8.1364906 
         197          198          199          200          201          202 
  53.7739935   52.5764771   22.6922292   -5.3666826  -63.1437137  -79.0153666 
         203          204          205          206          207          208 
 -69.8616591  -89.3731048  -85.2750638  -66.8387474   50.6950825   91.6034449 
         209          210          211          212          213          214 
 110.2858334  133.8084658  148.3915943   63.7427850    5.0657410   25.1728862 
         215          216          217          218          219          220 
 126.8220452  118.7729659    6.5454453  -26.0990709  100.6979130   84.0533928 
         221          222          223 
  13.6099502   30.8642127  -15.8504680 
> reml_recontruct_bio17$ace - reml_recon_bio17$ace
          113           114           115           116           117 
 0.0102098255  0.0176801507  0.0189738083  0.0067782163  0.0059941325 
          118           119           120           121           122 
 0.0057554588  0.0046868887  0.0032411256  0.0016953007  0.0044315065 
          123           124           125           126           127 
 0.0037897638  0.0037316735  0.0037164863  0.0036452952  0.0017826011 
          128           129           130           131           132 
 0.0029372230  0.0042320579  0.0037884021  0.0017104839  0.0013320575 
          133           134           135           136           137 
 0.0039133592  0.0014211072  0.0008771962  0.0022168401  0.0187246063 
          138           139           140           141           142 
 0.0082046204  0.0059515458  0.0111573527  0.0079706948  0.0043359870 
          143           144           145           146           147 
 0.0022245737  0.0069801867  0.0063456826  0.0026322918  0.0025471196 
          148           149           150           151           152 
 0.0014454434  0.0006430618  0.0056696351  0.0024854457  0.0006388358 
          153           154           155           156           157 
 0.0029986779  0.0067090910  0.0103980382  0.0118562132  0.0069429148 
          158           159           160           161           162 
 0.0058329132  0.0056978188  0.0038992422  0.0028985159  0.0006263408 
          163           164           165           166           167 
 0.0024389050  0.0049339485  0.0044521922  0.0032083437  0.0014135114 
          168           169           170           171           172 
 0.0015672492  0.0005989062  0.0034681768  0.0020410647  0.0016947532 
          173           174           175           176           177 
 0.0090267511  0.0037787684  0.0026263978  0.0007913291  0.0106996220 
          178           179           180           181           182 
 0.0113474987  0.0117052870  0.0115755458  0.0068258567  0.0056269965 
          183           184           185           186           187 
 0.0041569541  0.0109035568  0.0090768836  0.0077391440  0.0077535069 
          188           189           190           191           192 
 0.0047211586  0.0036394055  0.0024924416  0.0046124016  0.0111947395 
          193           194           195           196           197 
 0.0044697670  0.0120850216  0.0120412742  0.0021644082  0.0044492135 
          198           199           200           201           202 
 0.0039353030  0.0035173380  0.0082086380  0.0069988558  0.0075091231 
          203           204           205           206           207 
 0.0069252270  0.0083881449  0.0054291912  0.0027614566  0.0052556809 
          208           209           210           211           212 
 0.0023409068  0.0032436611  0.0043497934  0.0029757899  0.0009053574 
          213           214           215           216           217 
 0.0002866454  0.0005008430  0.0028033923  0.0027945567  0.0025074468 
          218           219           220           221           222 
 0.0002446814  0.0049538825  0.0046995988  0.0040752370  0.0042808158 
          223 
-0.0002645588 
> pgl_recontruct_bio17$ace - pgls_recon_bio17$ace #REML y PGLS y ML (con reconstruct) iguales en todos los casos. ML en ace no calcular el 95CI y además según el paquete mejor REML que ML.
          113           114           115           116           117 
-4.903274e-08 -1.285957e-08 -4.371714e-09 -1.434842e-09 -8.593588e-10 
          118           119           120           121           122 
-2.661977e-10 -9.333689e-11 -4.956746e-11 -1.637090e-11 -2.290790e-11 
          123           124           125           126           127 
 3.694822e-12  5.456968e-12  9.322321e-12  9.890755e-12  1.455192e-11 
          128           129           130           131           132 
 1.205080e-11 -1.887202e-11 -9.890755e-12  1.045919e-11  1.369926e-11 
          133           134           135           136           137 
-2.203819e-10 -1.705303e-12  1.807621e-11 -4.979483e-11 -4.175888e-09 
          138           139           140           141           142 
-7.524363e-10 -4.020535e-10 -4.152071e-09 -2.367074e-09 -7.325980e-10 
          143           144           145           146           147 
-3.385594e-10 -7.668177e-10 -4.949925e-10 -9.117684e-11 -5.343281e-11 
          148           149           150           151           152 
-8.071765e-12  2.637535e-11 -3.672085e-10 -5.343281e-11  3.603873e-11 
          153           154           155           156           157 
-1.184617e-10 -1.158656e-08 -4.454932e-09 -1.947342e-09 -3.291234e-10 
          158           159           160           161           162 
-8.174084e-11 -6.855316e-11 -3.865352e-11 -2.455636e-11 -3.410605e-13 
          163           164           165           166           167 
-2.273737e-11 -4.831691e-11 -4.138201e-11 -2.478373e-11 -8.299139e-12 
          168           169           170           171           172 
-1.659828e-11 -2.046363e-12 -1.300577e-10 -2.398792e-11 -1.477929e-11 
          173           174           175           176           177 
-6.192522e-10 -1.828084e-10 -1.119815e-10 -1.944045e-11 -1.232934e-10 
          178           179           180           181           182 
-8.071765e-11 -4.223466e-11 -4.257572e-11 -2.177103e-11 -1.699618e-11 
          183           184           185           186           187 
-1.176659e-11 -3.853984e-11 -2.620482e-11 -2.137313e-11 -2.319211e-11 
          188           189           190           191           192 
-7.901235e-12 -6.139089e-12 -4.604317e-12 -1.159606e-11 -5.604761e-11 
          193           194           195           196           197 
-1.682565e-11 -3.961986e-11 -4.001777e-11 -4.604317e-12 -1.274088e-09 
          198           199           200           201           202 
-7.235030e-10 -2.328875e-10 -4.043670e-09 -2.127081e-09 -1.665171e-09 
          203           204           205           206           207 
-4.699814e-10 -9.931682e-10 -5.035190e-10 -2.958132e-10 -2.207400e-09 
          208           209           210           211           212 
-9.687824e-10 -6.039045e-10 -2.969500e-10 -1.306262e-10 -4.450840e-11 
          213           214           215           216           217 
-1.421085e-12 -1.267608e-11 -6.639311e-11 -5.596235e-11 -7.389644e-12 
          218           219           220           221           222 
-1.007550e-11 -1.637090e-10 -1.243166e-10 -3.188916e-11 -3.984724e-11 
          223 
-6.929213e-11 
> 
> #OU 
> pgls_ou_bio17 = reconstruct(bio17_vector, tree_prunned, method = "GLS_OU", alpha = 0.036, CI = TRUE)
> pgls_ous_bio17 = reconstruct(bio17_vector, tree_prunned, method = "GLS_OUS", alpha = 0.036, CI = TRUE) #Mas alto ape
> 
> # OU en ape vs OU en compare 4.6 (SE and Adj.SE) in bio17
> abs(pgls_ous_bio17$CI95[,1] + (-pgls_ous_bio17$CI95[,2])) - anc_ou_bio17$SE
      113       114       115       116       117       118       119       120 
-67.66000 367.77304 349.84584 301.99446 274.80396 214.58551 163.91077 167.14234 
      121       122       123       124       125       126       127       128 
159.16278 131.15312 114.94284 111.47154 110.78597 111.39182 115.84054 122.06170 
      129       130       131       132       133       134       135       136 
131.36569 134.19738 129.72689 126.86072 221.00044 115.59551  86.11612 167.59564 
      137       138       139       140       141       142       143       144 
350.16601 265.94762 236.27488 345.51192 333.53120 272.43757 236.52256 252.09076 
      145       146       147       148       149       150       151       152 
232.36684 175.25949 162.97743 146.85633 106.26278 230.86966 172.79840  81.41636 
      153       154       155       156       157       158       159       160 
187.71101 363.66872 347.41357 312.56186 208.92598 138.48196 133.22176 133.80366 
      161       162       163       164       165       166       167       168 
139.82722  82.77222 141.65896 133.23956 139.90824 139.05273 112.36192 125.27183 
      169       170       171       172       173       174       175       176 
 81.57360 186.64000 116.28753 104.93158 248.69401 207.30437 193.31097 115.33676 
      177       178       179       180       181       182       183       184 
156.76403 136.85153 122.94685 121.76906 138.15192 141.56087 150.38985 122.42079 
      185       186       187       188       189       190       191       192 
138.10237 150.83805 134.23460 137.67059 135.07106 134.93556 153.88461 144.36785 
      193       194       195       196       197       198       199       200 
158.07755 150.28477 151.15185 114.34156 303.06802 275.88407 214.39225 342.11785 
      201       202       203       204       205       206       207       208 
330.81163 324.57320 279.56533 312.51642 286.56883 267.24636 329.04842 290.18420 
      209       210       211       212       213       214       215       216 
265.27210 227.94118 204.35773 186.00458 123.09253 154.15855 189.77218 189.79490 
      217       218       219       220       221       222       223 
151.53003 150.42851 219.59301 219.53261 180.51635 188.95046 121.72400 
> abs(pgls_ous_bio17$CI95[,1] + (-pgls_ous_bio17$CI95[,2])) - anc_ou_bio17$Adj.SE #range of pgls_ous are broader than SE and Adj.SE
      113       114       115       116       117       118       119       120 
-67.66000 603.86304 556.89584 456.18446 401.63396 291.88551 197.81077 198.67234 
      121       122       123       124       125       126       127       128 
176.67278 135.97312 109.27284 102.54154 100.93597 101.71182 104.50054 119.47170 
      129       130       131       132       133       134       135       136 
134.07569 135.22738  99.10689  88.75072 268.90044  75.59551  16.55612 135.66564 
      137       138       139       140       141       142       143       144 
557.18601 375.08762 310.78488 539.68192 507.79120 372.72757 294.83256 342.39076 
      145       146       147       148       149       150       151       152 
304.55684 194.18949 170.82743 141.29633  68.72278 298.20966 173.91840  12.95636 
      153       154       155       156       157       158       159       160 
187.60101 595.94872 551.87357 491.55186 286.06598 156.22196 146.11176 140.97366 
      161       162       163       164       165       166       167       168 
145.96722  10.37222 147.68896 144.79956 155.84824 147.82273  82.26192 114.63183 
      169       170       171       172       173       174       175       176 
 25.23360 225.52000  81.54753  57.56158 361.51401 253.54437 216.61097  78.61676 
      177       178       179       180       181       182       183       184 
191.94403 154.97153 129.07685 126.91906 153.32192 156.45087 170.77985 127.96079 
      185       186       187       188       189       190       191       192 
154.63237 175.37805 146.00460 143.83059 134.81106 125.76556 166.72461 164.11785 
      193       194       195       196       197       198       199       200 
178.11755 166.40477 167.58185  52.07156 414.95802 357.57407 242.48225 538.20785 
      201       202       203       204       205       206       207       208 
509.05163 493.73320 386.86533 465.14642 409.53883 376.49636 507.41842 422.38420 
      209       210       211       212       213       214       215       216 
375.07210 300.14118 260.16773 220.54458  87.57253 156.38855 230.64218 229.34490 
      217       218       219       220       221       222       223 
185.22003 161.34851 272.48301 268.14261 160.35635 182.61046  82.13400 
> 
> #differences between SE and Adj.SE in bio17
> median(anc_ou_bio17$SE)
[1] 115.57
> median(anc_ou_bio17$Adj.SE)
[1] 95.33
> wilcox.test(anc_ou_bio17$SE, anc_ou_bio17$Adj.SE)

	Wilcoxon rank sum test with continuity correction

data:  anc_ou_bio17$SE and anc_ou_bio17$Adj.SE
W = 8890, p-value = 1.176e-08
alternative hypothesis: true location shift is not equal to 0

> plot(density(anc_ou_bio17$SE - anc_ou_bio17$Adj.SE)) 
> quantile(anc_ou_bio17$SE - anc_ou_bio17$Adj.SE, probs=c(0.025, 0.975))
    2.5%    97.5% 
-63.8175 207.0275 
> #CI95 overlap with zero, although significant the wilcoxon test
> 
> # OU en ape vs OU en compare 4.6 (SE and Adj.SE) in bio4
> abs(pgls_ous_bio4$CI95[,1] + (-pgls_ous_bio4$CI95[,2])) - anc_ou_bio4$SE
      113       114       115       116       117       118       119       120 
-1762.770  7261.362  7240.695  7010.463  6768.424  5775.667  4702.231  4761.816 
      121       122       123       124       125       126       127       128 
 4480.413  3874.206  3373.726  3282.945  3232.305  3241.881  3264.440  3512.555 
      129       130       131       132       133       134       135       136 
 3876.103  3925.099  3708.615  3605.868  5854.708  3194.162  2386.823  4611.984 
      137       138       139       140       141       142       143       144 
 7241.550  6577.365  6138.394  7228.545  7189.557  6679.042  6137.700  6505.589 
      145       146       147       148       149       150       151       152 
 6255.983  4931.107  4633.826  4156.341  2960.622  6219.188  4740.808  2245.304 
      153       154       155       156       157       158       159       160 
 5070.113  7260.634  7234.248  7079.721  5614.279  4067.671  3948.192  3913.388 
      161       162       163       164       165       166       167       168 
 4009.841  2287.895  4031.655  3927.904  4066.043  3959.847  3138.745  3495.627 
      169       170       171       172       173       174       175       176 
 2258.900  5136.799  3252.881  2937.681  6383.329  5656.064  5338.227  3183.314 
      177       178       179       180       181       182       183       184 
 4581.651  4159.050  3834.668  3807.954  4130.420  4197.540  4364.798  3811.933 
      185       186       187       188       189       190       191       192 
 4134.229  4393.243  4000.947  4004.448  3906.279  3846.205  4364.509  4317.240 
      193       194       195       196       197       198       199       200 
 4432.465  4438.395  4454.471  3174.064  7008.635  6748.030  5674.925  7239.367 
      201       202       203       204       205       206       207       208 
 7216.133  7196.609  6717.189  7129.174  6911.729  6659.789  7191.258  6961.600 
      209       210       211       212       213       214       215       216 
 6736.254  6275.774  5801.063  5200.396  3415.574  4305.903  5462.735  5440.020 
      217       218       219       220       221       222       223 
 4217.081  4178.996  6125.933  6079.245  4969.435  5173.751  3314.127 
> abs(pgls_ous_bio4$CI95[,1] + (-pgls_ous_bio4$CI95[,2])) - anc_ou_bio4$Adj.SE #range of pgls_ous are broader than SE and Adj.SE
      113       114       115       116       117       118       119       120 
-1762.770 11806.442 11769.665 11357.603 10923.174  9166.317  7272.831  7391.856 
      121       122       123       124       125       126       127       128 
 6906.283  5819.636  5005.346  4853.515  4776.855  4794.141  4860.060  5262.175 
      129       130       131       132       133       134       135       136 
 5816.163  5890.359  5447.095  5248.938  9257.898  4540.482  3155.083  7094.174 
      137       138       139       140       141       142       143       144 
11771.240 10619.215  9862.734 11749.715 11681.547 10787.872  9826.700 10492.229 
      145       146       147       148       149       150       151       152 
10055.033  7718.467  7222.686  6432.991  4424.352  9997.298  7461.398  3246.614 
      153       154       155       156       157       158       159       160 
 8026.443 11803.514 11759.208 11492.271  8917.749  6178.451  5968.892  5917.088 
      161       162       163       164       165       166       167       168 
 6080.351  3190.685  6158.685  5928.434  6173.183  5973.637  4623.025  5236.727 
      169       170       171       172       173       174       175       176 
 3117.290  8149.609  4955.421  4416.911 10234.449  9011.124  8445.737  4849.844 
      177       178       179       180       181       182       183       184 
 7002.081  6253.820  5674.668  5627.164  6191.840  6319.660  6624.278  5632.923 
      185       186       187       188       189       190       191       192 
 6198.229  6650.823  5964.777  5970.248  5790.579  5675.225  6642.489  6542.970 
      193       194       195       196       197       198       199       200 
 6870.105  6755.325  6782.941  4542.564 11343.395 10884.060  9055.005 11758.817 
      201       202       203       204       205       206       207       208 
11716.603 11680.689 10790.079 11563.604 11187.569 10767.119 11668.988 11250.580 
      209       210       211       212       213       214       215       216 
10841.844 10022.664  9221.703  8155.456  5032.534  6625.373  8661.505  8626.340 
      217       218       219       220       221       222       223 
 6599.201  6482.316  9729.353  9644.595  7746.465  7995.901  4772.427 
> 
> #differences between SE and Adj.SE in bio4
> median(anc_ou_bio4$SE)
[1] 3114.13
> median(anc_ou_bio4$Adj.SE)
[1] 684.65
> wilcox.test(anc_ou_bio4$SE, anc_ou_bio4$Adj.SE)

	Wilcoxon rank sum test with continuity correction

data:  anc_ou_bio4$SE and anc_ou_bio4$Adj.SE
W = 12316, p-value < 2.2e-16
alternative hypothesis: true location shift is not equal to 0

> plot(density(anc_ou_bio4$SE - anc_ou_bio4$Adj.SE))
> quantile(anc_ou_bio4$SE - anc_ou_bio4$Adj.SE, probs=c(0.025, 0.975)) #CI95 does not overlap with zero, and significant the wilcoxon test
   2.5%   97.5% 
 891.69 4529.15 
> 
> 
> #decision
> #Adj.SE has lower values than SE, but as we are only to use BM, and we only want SE of OU to compare with SE of BM we are going to use the regular SE of compare, which probably is more similar to the SE of reconstruct According to comapre, SE is estimate with the Schluter et al. method, which may differ only slightly from Hansen method, the method used for reconstruct. Adj.SE correspond to the method of Rohlf (2001, Evolution 55:2143-2150), who proposed another way of estimating standard errors for ancestral states. We will use SE because of that.
> 
> #### final reconstructed variables ####
> anc_ou_bio4
    nodo1   State      SE  Adj.SE
1     113 6154.29 1762.77 1762.77
2     114 6165.65 5077.83  532.75
3     115 6221.85 5062.01  533.04
4     116 6420.32 4901.02  553.88
5     117 6533.86 4731.81  577.06
6     118 6962.89 4037.78  647.13
7     119 7219.99 3287.34  716.74
8     120 7090.98 3329.00  698.96
9     121 6967.65 3132.26  706.39
10    122 7391.34 2708.47  763.04
11    123 7077.77 2358.58  726.96
12    124 7053.30 2295.12  724.55
13    125 6981.07 2259.71  715.16
14    126 6971.76 2266.40  714.14
15    127 6859.42 2282.18  686.56
16    128 6989.17 2455.63  706.01
17    129 7440.92 2709.79  769.73
18    130 7511.61 2744.04  778.78
19    131 7821.62 2592.70  854.22
20    132 7836.39 2520.86  877.79
21    133 6225.67 4093.04  689.85
22    134 6032.98 2233.04  886.72
23    135 6108.55 1668.63  900.37
24    136 6217.45 3224.25  742.06
25    137 6217.21 5062.61  532.92
26    138 6260.31 4598.25  556.40
27    139 6319.83 4291.36  567.02
28    140 6154.72 5053.50  532.33
29    141 6174.65 5026.23  534.24
30    142 6262.59 4669.32  560.49
31    143 6328.05 4290.87  601.87
32    144 6082.49 4548.06  561.42
33    145 6096.65 4373.57  574.52
34    146 6183.48 3447.34  659.98
35    147 6166.62 3239.52  650.66
36    148 6144.78 2905.71  629.06
37    149 6115.73 2069.78  606.05
38    150 6093.31 4347.84  569.73
39    151 6197.76 3314.31  593.72
40    152 6179.35 1569.70  568.39
41    153 5932.16 3544.53  588.20
42    154 6142.22 5077.15  534.27
43    155 6075.51 5057.51  532.55
44    156 5835.78 4949.45  536.90
45    157 5524.55 3924.95  621.48
46    158 5239.56 2843.72  732.94
47    159 5236.04 2760.19  739.49
48    160 5353.67 2735.85  732.15
49    161 5450.35 2803.29  732.78
50    162 5608.28 1599.48  696.69
51    163 5443.99 2818.53  691.50
52    164 5215.38 2746.00  745.47
53    165 5245.54 2842.57  735.43
54    166 5201.28 2768.33  754.54
55    167 5312.26 2194.30  710.02
56    168 5221.56 2443.79  702.69
57    169 5225.56 1579.21  720.82
58    170 5774.35 3591.14  578.33
59    171 5912.71 2274.10  571.56
60    172 5930.53 2053.74  574.51
61    173 5569.30 4462.59  611.47
62    174 5911.95 3954.17  599.11
63    175 5979.99 3731.97  624.46
64    176 6000.51 2225.46  558.93
65    177 5099.70 3203.04  782.61
66    178 5041.30 2907.59  812.82
67    179 4898.83 2680.82  840.82
68    180 4887.00 2662.14  842.93
69    181 4875.94 2887.58  826.16
70    182 4896.80 2934.50  812.38
71    183 4937.85 3051.43  791.95
72    184 4875.40 2664.92  843.93
73    185 4897.25 2890.24  826.24
74    186 4934.54 3071.32  813.74
75    187 4911.32 2797.07  833.24
76    188 5023.91 2799.52  833.72
77    189 5060.74 2730.89  846.59
78    190 5150.47 2688.89  859.87
79    191 5041.96 3051.23  773.25
80    192 5222.09 3018.18  792.45
81    193 5477.89 3098.75  661.11
82    194 5403.03 3102.89  785.96
83    195 5415.84 3114.13  785.66
84    196 6122.93 2218.99  850.49
85    197 6357.28 4899.74  564.98
86    198 6355.61 4717.56  581.53
87    199 6331.91 3967.35  587.27
88    200 6163.00 5061.10  541.65
89    201 6167.18 5044.82  544.35
90    202 6167.89 5031.17  547.09
91    203 6212.44 4696.00  623.11
92    204 6159.26 4984.01  549.58
93    205 6153.04 4832.00  556.16
94    206 6143.62 4655.86  548.53
95    207 6169.46 5027.43  549.70
96    208 6273.90 4866.86  577.88
97    209 6321.72 4709.33  603.74
98    210 6461.98 4387.41  640.52
99    211 6374.39 4055.53  634.89
100   212 6245.84 3635.60  680.54
101   213 6074.36 2387.83  770.87
102   214 6261.13 3010.26  690.79
103   215 6356.93 3819.01  620.24
104   216 6347.85 3803.12  616.80
105   217 6197.88 2948.17  566.05
106   218 6344.06 2921.54  618.22
107   219 6605.18 4282.64  679.22
108   220 6638.23 4250.00  684.65
109   221 6845.24 3474.14  697.11
110   222 6656.24 3616.98  794.83
111   223 5257.80 2316.91  858.61
> anc_ou_bio17
    nodo1   State     SE Adj.SE
1     113 -499.50  67.66  67.66
2     114 -515.70 276.20  40.11
3     115 -474.14 258.66  51.61
4     116 -440.44 222.75  68.56
5     117 -428.23 202.65  75.82
6     118 -399.25 158.22  80.92
7     119 -376.12 120.85  86.95
8     120 -399.92 123.22  91.69
9     121 -391.95 117.34  99.83
10    122 -344.52  96.70  91.88
11    123 -329.57  84.74  90.41
12    124 -326.77  82.19  91.12
13    125 -324.70  81.69  91.54
14    126 -324.53  82.13  91.81
15    127 -322.35  85.41  96.75
16    128 -324.64  90.00  92.59
17    129 -344.07  96.85  94.14
18    130 -342.64  98.93  97.90
19    131 -345.40  95.65 126.27
20    132 -348.25  93.53 131.64
21    133 -454.08 162.93 115.03
22    134 -541.76  85.22 125.22
23    135 -556.34  63.49 133.05
24    136 -411.46 123.57 155.50
25    137 -474.51 258.84  51.82
26    138 -465.76 196.09  86.95
27    139 -470.83 174.21  99.70
28    140 -582.82 255.26  61.09
29    141 -586.14 246.09  71.83
30    142 -617.37 200.89 100.60
31    143 -621.04 174.38 116.07
32    144 -631.75 185.88  95.58
33    145 -641.36 171.33  99.14
34    146 -608.72 129.21 110.28
35    147 -599.89 120.16 112.31
36    148 -582.23 108.27 113.83
37    149 -561.39  78.35 115.89
38    150 -648.57 170.22 102.88
39    151 -693.35 127.39 126.27
40    152 -696.49  60.03 128.49
41    153 -585.70 138.40 138.51
42    154 -482.81 272.72  40.44
43    155 -490.05 256.85  52.39
44    156 -537.39 230.61  51.62
45    157 -645.04 154.03  76.89
46    158 -621.29 102.09  84.35
47    159 -621.34  98.22  85.33
48    160 -618.19  98.65  91.48
49    161 -614.11 103.09  96.95
50    162 -593.26  61.03 133.43
51    163 -612.92 104.43  98.40
52    164 -619.02  98.23  86.67
53    165 -618.97 103.14  87.20
54    166 -603.91 102.52  93.75
55    167 -594.82  82.84 112.94
56    168 -570.30  92.36 103.00
57    169 -557.88  60.15 116.49
58    170 -688.49 137.61  98.73
59    171 -710.31  85.74 120.48
60    172 -712.01  77.36 124.73
61    173 -512.23 183.37  70.55
62    174 -555.12 152.83 106.59
63    175 -540.22 142.52 119.22
64    176 -632.26  85.03 121.75
65    177 -460.93 115.57  80.39
66    178 -454.95 100.90  82.78
67    179 -463.60  90.65  84.52
68    180 -464.80  89.78  84.63
69    181 -479.51 101.85  86.68
70    182 -484.56 104.37  89.48
71    183 -487.27 110.88  90.49
72    184 -466.63  90.26  84.72
73    185 -476.75 101.81  85.28
74    186 -483.69 111.21  86.67
75    187 -464.31  98.96  87.19
76    188 -442.63 101.49  95.33
77    189 -438.92  99.58  99.84
78    190 -429.26  99.49 108.66
79    191 -493.63 113.46 100.62
80    192 -437.12 106.44  86.69
81    193 -479.12 116.55  96.51
82    194 -412.38 110.80  94.68
83    195 -411.11 111.43  95.00
84    196 -353.29  84.30 146.57
85    197 -411.30 223.51 111.62
86    198 -396.96 203.43 121.74
87    199 -407.75 158.07 129.98
88    200 -466.31 253.05  56.96
89    201 -516.83 244.21  65.97
90    202 -532.87 239.52  70.36
91    203 -588.20 206.13  98.83
92    204 -549.30 230.50  77.87
93    205 -560.93 211.31  88.34
94    206 -555.36 197.04  87.79
95    207 -407.86 242.89  64.52
96    208 -339.82 214.02  81.82
97    209 -322.41 195.61  85.81
98    210 -298.88 168.06  95.86
99    211 -281.11 150.66  94.85
100   212 -327.86 137.14 102.60
101   213 -358.72  90.76 126.28
102   214 -358.46 113.66 111.43
103   215 -264.80 139.91  99.04
104   216 -266.38 139.93 100.38
105   217 -309.52 111.73  78.04
106   218 -262.28 110.91  99.99
107   219 -314.60 161.91 109.02
108   220 -320.08 161.85 113.24
109   221 -339.92 133.09 153.25
110   222 -374.40 139.31 145.65
111   223 -462.43  89.75 129.34
> pgls_recon_bio4

    Ancestral Character Estimation

Call: ace(x = bio4_vector, phy = tree_prunned, type = "continuous", 
    method = "GLS", CI = TRUE, model = "BM", corStruct = corBrownian(1, 
        phy = tree_prunned), marginal = FALSE)

$ace
      113       114       115       116       117       118       119       120 
 6016.575  5797.960  5888.187  6690.617  6786.979  7629.617  7978.074  7839.180 
      121       122       123       124       125       126       127       128 
 8093.203  8363.888  6173.852  6101.080  5916.870  5932.899  6496.947  6041.656 
      129       130       131       132       133       134       135       136 
 8800.645  9545.356 11804.323 11594.046  5879.608  5015.274  6455.994  6026.071 
      137       138       139       140       141       142       143       144 
 5849.422  7390.571  8227.990  5580.137  5813.998  7097.028  7749.865  4866.247 
      145       146       147       148       149       150       151       152 
 5038.691  5959.264  5773.145  5516.298  4883.971  4955.745  6481.422  6072.958 
      153       154       155       156       157       158       159       160 
 3526.318  6238.457  6708.547  5701.419  5021.498  4252.375  4291.490  4795.545 
      161       162       163       164       165       166       167       168 
 5251.162  4688.637  4696.553  4110.654  4193.804  3372.975  3316.780  2534.759 
      169       170       171       172       173       174       175       176 
 2204.174  5713.414  5783.760  6001.205  5188.950  5775.024  6107.527  5187.720 
      177       178       179       180       181       182       183       184 
 4395.128  4454.794  4013.222  3957.239  3365.036  3261.493  3056.883  3872.506 
      185       186       187       188       189       190       191       192 
 3550.242  3395.695  3848.188  4202.813  4022.895  4273.467  3302.163  5080.099 
      193       194       195       196       197       198       199       200 
 4168.721  5905.233  5954.677  8303.154  8903.363  8410.419  7685.906  5896.936 
      201       202       203       204       205       206       207       208 
 6119.584  6116.856  6735.538  5896.481  5602.909  5202.638  5482.738  6155.500 
      209       210       211       212       213       214       215       216 
 6205.857  6983.097  6536.101  6380.576  5199.656  7071.186  6320.892  6245.765 
      217       218       219       220       221       222       223 
 4319.612  6611.300  8008.773  8368.607 10481.982  8789.455  1496.317 

$CI95
         [,1]      [,2]
113  6016.575  6016.575
114  5790.656  5805.264
115  5882.125  5894.249
116  6685.404  6695.830
117  6782.311  6791.648
118  7625.870  7633.363
119  7975.230  7980.918
120  7836.230  7842.130
121  8090.334  8096.072
122  8361.609  8366.166
123  6171.819  6175.884
124  6099.114  6103.046
125  5914.898  5918.842
126  5930.911  5934.886
127  6494.820  6499.074
128  6039.459  6043.854
129  8798.358  8802.932
130  9542.996  9547.716
131 11801.984 11806.663
132 11591.745 11596.348
133  5875.681  5883.535
134  5013.136  5017.412
135  6454.390  6457.598
136  6023.033  6029.108
137  5843.332  5855.513
138  7385.823  7395.319
139  8223.815  8232.165
140  5573.847  5586.428
141  5808.028  5819.968
142  7092.236  7101.820
143  7745.696  7754.035
144  4861.932  4870.562
145  5034.810  5042.571
146  5956.185  5962.343
147  5770.280  5776.011
148  5513.660  5518.936
149  4882.005  4885.938
150  4951.828  4959.662
151  6478.292  6484.552
152  6071.435  6074.481
153  3522.908  3529.727
154  6231.477  6245.437
155  6702.224  6714.871
156  5695.891  5706.946
157  5017.777  5025.218
158  4249.971  4254.778
159  4289.191  4293.788
160  4793.189  4797.902
161  5248.653  5253.671
162  4687.088  4690.185
163  4693.995  4699.112
164  4108.332  4112.977
165  4191.331  4196.276
166  3370.462  3375.487
167  3314.704  3318.856
168  2532.451  2537.067
169  2202.650  2205.698
170  5710.063  5716.766
171  5781.627  5785.893
172  5999.274  6003.137
173  5184.594  5193.307
174  5771.380  5778.668
175  6104.108  6110.946
176  5185.581  5189.859
177  4392.420  4397.837
178  4452.483  4457.105
179  4011.171  4015.273
180  3955.212  3959.266
181  3362.643  3367.429
182  3259.029  3263.958
183  3054.220  3059.546
184  3870.456  3874.556
185  3547.850  3552.633
186  3393.028  3398.361
187  3845.841  3850.534
188  4200.365  4205.261
189  4020.483  4025.306
190  4271.026  4275.908
191  3299.379  3304.947
192  5077.619  5082.580
193  4165.847  4171.595
194  5902.632  5907.834
195  5952.056  5957.297
196  8301.034  8305.273
197  8898.005  8908.722
198  8405.621  8415.217
199  7682.076  7689.737
200  5891.208  5902.664
201  6114.241  6124.927
202  6111.666  6122.046
203  6730.511  6740.566
204  5891.331  5901.631
205  5598.102  5607.717
206  5198.043  5207.232
207  5477.122  5488.355
208  6150.653  6160.347
209  6201.485  6210.228
210  6979.384  6986.810
211  6532.665  6539.537
212  6377.279  6383.873
213  5197.384  5201.928
214  7068.389  7073.984
215  6317.678  6324.105
216  6242.525  6249.004
217  4316.850  4322.374
218  6608.553  6614.047
219  8005.130  8012.417
220  8364.892  8372.322
221 10478.731 10485.234
222  8786.056  8792.855
223  1494.039  1498.594

> pgls_recon_bio17 #For PGLS under BM we have to add corBrownian(1, phy = tree_prunned)

    Ancestral Character Estimation

Call: ace(x = bio17_vector, phy = tree_prunned, type = "continuous", 
    method = "GLS", CI = TRUE, model = "BM", corStruct = corBrownian(1, 
        phy = tree_prunned), marginal = FALSE)

$ace
       113        114        115        116        117        118        119 
-508.64640 -525.22807 -482.33221 -464.92726 -460.32787 -439.58797 -409.24314 
       120        121        122        123        124        125        126 
-434.99438 -371.14322 -360.92532 -318.77087 -307.54656 -278.71796 -276.32703 
       127        128        129        130        131        132        133 
-212.88627 -298.79454 -360.29185 -355.25220 -347.95013 -345.50623 -476.99957 
       134        135        136        137        138        139        140 
-567.13365 -600.37953 -422.59419 -481.48122 -429.59959 -454.40847 -583.83062 
       141        142        143        144        145        146        147 
-595.58415 -651.59164 -651.86393 -607.14302 -616.19327 -595.43021 -582.29989 
       148        149        150        151        152        153        154 
-556.32304 -523.66619 -628.75403 -713.27227 -742.07903 -574.12636 -491.81695 
       155        156        157        158        159        160        161 
-490.37808 -541.26778 -630.97481 -597.13375 -597.79435 -599.26429 -598.97385 
       162        163        164        165        166        167        168 
-588.27605 -601.43315 -599.24018 -604.70490 -581.45638 -587.94049 -543.25959 
       169        170        171        172        173        174        175 
-538.03727 -697.61484 -734.29457 -740.81258 -531.34319 -590.36937 -566.48775 
       176        177        178        179        180        181        182 
-722.39253 -477.98283 -471.32976 -479.86301 -481.51852 -496.06630 -502.31066 
       183        184        185        186        187        188        189 
-503.54877 -484.47811 -498.00038 -505.43456 -482.02027 -448.62717 -447.42322 
       190        191        192        193        194        195        196 
-425.35689 -524.06475 -450.49273 -513.63848 -415.10857 -413.19685 -328.02820 
       197        198        199        200        201        202        203 
-402.70366 -385.39707 -390.06385 -486.82916 -550.97254 -573.50414 -661.03268 
       204        205        206        207        208        209        210 
-596.08537 -614.57939 -613.09748 -415.57813 -360.18857 -354.10978 -336.96288 
       211        212        213        214        215        216        217 
-291.56117 -344.74011 -354.09987 -375.23423 -233.91709 -233.72325 -233.33423 
       218        219        220        221        222        223 
 -96.79433 -358.00858 -353.81227 -330.11312 -428.50088 -358.57012 

$CI95
          [,1]       [,2]
113 -508.64640 -508.64640
114 -532.53204 -517.92410
115 -488.39444 -476.26997
116 -470.14040 -459.71411
117 -464.99622 -455.65952
118 -443.33473 -435.84120
119 -412.08675 -406.39953
120 -437.94440 -432.04435
121 -374.01231 -368.27413
122 -363.20400 -358.64665
123 -320.80342 -316.73833
124 -309.51238 -305.58075
125 -280.69019 -276.74574
126 -278.31452 -274.33953
127 -215.01348 -210.75906
128 -300.99214 -296.59695
129 -362.57891 -358.00479
130 -357.61231 -352.89210
131 -350.28996 -345.61029
132 -347.80795 -343.20452
133 -480.92686 -473.07229
134 -569.27180 -564.99549
135 -601.98356 -598.77550
136 -425.63145 -419.55694
137 -487.57180 -475.39063
138 -434.34755 -424.85162
139 -458.58356 -450.23338
140 -590.12081 -577.54043
141 -601.55436 -589.61394
142 -656.38363 -646.79965
143 -656.03329 -647.69458
144 -611.45800 -602.82805
145 -620.07397 -612.31258
146 -598.50920 -592.35121
147 -585.16527 -579.43452
148 -558.96108 -553.68501
149 -525.63273 -521.69966
150 -632.67080 -624.83726
151 -716.40249 -710.14204
152 -743.60208 -740.55599
153 -577.53603 -570.71669
154 -498.79700 -484.83690
155 -496.70151 -484.05465
156 -546.79541 -535.74015
157 -634.69523 -627.25439
158 -599.53680 -594.73071
159 -600.09313 -595.49557
160 -601.62054 -596.90803
161 -601.48263 -596.46507
162 -589.82447 -586.72763
163 -603.99197 -598.87433
164 -601.56261 -596.91774
165 -607.17723 -602.23257
166 -583.96880 -578.94395
167 -590.01655 -585.86444
168 -545.56772 -540.95146
169 -539.56131 -536.51323
170 -700.96654 -694.26314
171 -736.42737 -732.16177
172 -742.74395 -738.88120
173 -535.69970 -526.98668
174 -594.01335 -586.72539
175 -569.90651 -563.06899
176 -724.53128 -720.25377
177 -480.69106 -475.27459
178 -473.64069 -469.01883
179 -481.91380 -477.81221
180 -483.54545 -479.49159
181 -498.45931 -493.67329
182 -504.77497 -499.84635
183 -506.21216 -500.88539
184 -486.52814 -482.42809
185 -500.39183 -495.60893
186 -508.10102 -502.76811
187 -484.36659 -479.67396
188 -451.07539 -446.17895
189 -449.83477 -445.01166
190 -427.79758 -422.91621
191 -526.84865 -521.28084
192 -452.97347 -448.01200
193 -516.51238 -510.76459
194 -417.70929 -412.50785
195 -415.81741 -410.57629
196 -330.14793 -325.90848
197 -408.06205 -397.34526
198 -390.19535 -380.59880
199 -393.89463 -386.23306
200 -492.55738 -481.10095
201 -556.31592 -545.62917
202 -578.69400 -568.31429
203 -666.05996 -656.00540
204 -601.23520 -590.93553
205 -619.38691 -609.77186
206 -617.69202 -608.50293
207 -421.19454 -409.96172
208 -365.03571 -355.34142
209 -358.48110 -349.73847
210 -340.67600 -333.24975
211 -294.99692 -288.12541
212 -348.03748 -341.44274
213 -356.37232 -351.82741
214 -378.03181 -372.43666
215 -237.13050 -230.70369
216 -236.96272 -230.48379
217 -236.09615 -230.57231
218  -99.54115  -94.04751
219 -361.65194 -354.36523
220 -357.52755 -350.09699
221 -333.36492 -326.86131
222 -431.90018 -425.10158
223 -360.84782 -356.29241

> 
> 
> #calculate quantiles for the ancestral state of bio4 and the CI
> quantile_ace_bio4 = quantile(pgls_recon_bio4$ace, probs=c(0.025, 0.5, 0.975))
> quantile_ace_ci_bio4 = quantile(abs(pgls_recon_bio4$CI95[,1]-pgls_recon_bio4$CI95[,2]), probs=c(0.025, 0.5, 0.975))
> quantile_ace_bio4
    2.5%      50%    97.5% 
2926.352 5888.187 9779.513 
> quantile_ace_ci_bio4
     2.5%       50%     97.5% 
 3.084651  5.595156 12.597003 
> 
> #calculate percentage of BIO4 that correspond to variability. For that we comapre the medians of ace BIO and medians of the difference CI BIO4
> (quantile_ace_ci_bio4[2]*100)/quantile_ace_bio4[2]
       50% 
0.09502341 
> 
> 
> #calculate quantiles for the ancestrlaa state of bio17 and the CI
> quantile_ace_bio17 = quantile(pgls_recon_bio17$ace, probs=c(0.025, 0.5, 0.975))
> quantile_ace_ci_bio17 = quantile(abs(pgls_recon_bio17$CI95[,1]-pgls_recon_bio17$CI95[,2]), probs=c(0.025, 0.5, 0.975))
> quantile_ace_bio17
     2.5%       50%     97.5% 
-725.3680 -484.4781 -233.6260 
> quantile_ace_ci_bio17
     2.5%       50%     97.5% 
 3.084651  5.595156 12.597003 
> 
> #calculate percentage of bio17 that correspond to variability. For that we comapre the medians of ace BIO and medians of the difference CI bio17
> (quantile_ace_ci_bio17[2]*100)/abs(quantile_ace_bio17[2])
     50% 
1.154883 
> 
> #### plots the final models
> 
> ##check that the order of rows is correct
> summary(names(pgls_recon_bio4$ace) == anc_ou_bio4$nodo1)
   Mode    TRUE 
logical     111 
> summary(names(pgls_recon_bio17$ace) == anc_ou_bio17$nodo1)
   Mode    TRUE 
logical     111 
> 
> ## modify function to add error bars of ancestral state (errorbar.contMap), because of a problem in the calculation of ii and jj. There are problems when the lower limit of CI95 and the lower limit of the range of current values of the trait are both negatives. The function calculates the difference, but the resulting number is negative, so I have added an abs()
> #in "ancestral.states" you have to include an object with the state as ace and the CI95 as CI95. Typical ace object. 
> errorbar_contMap_modified = function (obj, user=FALSE, anc.states=NULL, ...){
+     if (hasArg(x)){
+         x <- list(...)$x
+     } else{
+         x <- setNames(sapply(1:Ntip(obj$tree), function(x, obj) {
+         ii <- which(obj$tree$edge[, 2] == x)
+         ss <- names(obj$tree$maps[[ii]][length(obj$tree$maps[[ii]])])
+         obj$lims[1] + as.numeric(ss)/(length(obj$cols) - 1) * 
+             diff(obj$lims)
+         }, obj = obj), obj$tree$tip.label)
+     }
+     if (hasArg(scale.by.ci)) {
+         scale.by.ci <- list(...)$scale.by.ci
+     } else {
+         scale.by.ci <- TRUE
+     }
+     if (hasArg(lwd)){
+         lwd <- list(...)$lwd
+     } else {
+         lwd <- 14
+     }
+     tree <- obj$tree
+     if(user==FALSE){
+         aa <- fastAnc(tree, x, CI = TRUE)
+     } else {
+         aa = anc.states
+     }
+     xlim <- range(aa$CI95)
+     if (xlim[2] > obj$lims[2] || xlim[1] < obj$lims[1]) {
+         cat(paste("  -----\n  The range of the contMap object, presently (", 
+             round(obj$lims[1], 4), ",", round(obj$lims[2], 4), 
+             "), should be equal to\n  or greater than the range of the CIs on ancestral states: (", 
+             round(xlim[1], 4), ",", round(xlim[2], 4), ").\n", 
+             sep = ""))
+         cat(paste("  To ensure that your error bars are correctly plotted, please recompute your\n", 
+             "  contMap object and increase lims.\n  -----\n", 
+             sep = ""))
+     }
+     d <- diff(obj$lims)
+     if (scale.by.ci) {
+         v <- aa$CI95[, 2] - aa$CI95[, 1]
+         v <- v/max(v)
+     } else {
+         v <- rep(0.5, tree$Nnode)
+     }    
+     n <- length(obj$cols) - 1
+     lastPP <- get("last_plot.phylo", envir = .PlotPhyloEnv)
+     h <- max(nodeHeights(tree))
+     for (i in 1:tree$Nnode) {
+         ii <- round((abs(aa$CI95[i, 1] - obj$lims[1]))/d * n)
+         jj <- round((abs(aa$CI95[i, 2] - obj$lims[1]))/d * (n + 1))
+         cols <- obj$cols[ii:jj]
+         add.color.bar(leg = 0.1 * h * v[i], cols = cols, prompt = FALSE, 
+             x = lastPP$xx[i + Ntip(tree)] - 0.05 * h * v[i], 
+             y = lastPP$yy[i + Ntip(tree)], title = "", subtitle = "", 
+             lims = NULL, lwd = lwd)
+     }
+ }
> 
> ##create a tree with species names as "P. XXXXX" to save space in the plots
> #before check that the order of the species names from climate_medians and tip.label of the tree is the same. 
> summary(tree_prunned$tip.label == paste("Pinus_", climate_medians$species, sep=""))
   Mode    TRUE 
logical     112 
> #copy the tree
> tree_prunned_to_plot = tree_prunned
> #add reduced names
> tree_prunned_to_plot$tip.label <- paste("P. ", climate_medians$species, sep="")
> 
> ##BM bio4
> #create a vector with the variable and species names as "P. XXXXX", similar to the tip.labels of tree_prunned_to_plot
> summary(names(bio4_vector) == paste("Pinus_", climate_medians$species, sep="")) #before check that the order of the species names from climate_medians and bio4_vector is the same. 
   Mode    TRUE 
logical     112 
> bio4_vector_to_plot = bio4_vector #copy the vector of the trait
> names(bio4_vector_to_plot) <- paste("P. ", climate_medians$species, sep="") #add reduced names
> 
> #open the pdf of the plot
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/plot_anc/plot_ancestral_states_bm_bio4.pdf", width = 24, height = 24)
> 
> #create the tree interpolated
> obj_bm_bio4 = contMap(tree_prunned_to_plot, bio4_vector_to_plot, method="user", anc.states=pgls_recon_bio4$ace, plot=FALSE, lwd = 2) #aquí anc.states is a file with only ace, without 95CI.
> 
> #plot
> plot(obj_bm_bio4, type="fan", fsize=c(2.5, 2.3)) #fsize tiene el primer valor del tamaño de las tip labels, el segundo es para la legenda.
> 
> #add the error bars
> errorbar_contMap_modified(obj=obj_bm_bio4, user=TRUE, anc.states=pgls_recon_bio4, scale.by.ci=TRUE) #aquí anc.states is the complete file with ace and 95CI.
>     #scale.by.ci=TRUE: that determines whether or not the length of the error bars will be scaled by the CI width
> dev.off()
pdf 
  2 
> 
> 
> ##OU bio4
> #create a vector with the variable and species names as "P. XXXXX", similar to the tip.labels of tree_prunned_to_plot
> summary(names(bio4_vector) == paste("Pinus_", climate_medians$species, sep="")) #before check that the order of the species names from climate_medians and bio4_vector is the same. 
   Mode    TRUE 
logical     112 
> bio4_vector_to_plot = bio4_vector #copy the vector of the trait
> names(bio4_vector_to_plot) <- paste("P. ", climate_medians$species, sep="") #add reduced names
> 
> #create a list with ancestral state and CI95 of OU to plot
> ace_bio4_ou = anc_ou_bio4$State #extract acenstral state
> names(ace_bio4_ou) <- anc_ou_bio4$nodo1 #set names as node1
> CI95_bio4_ou = matrix(NA, ncol=2, nrow=nrow(anc_ou_bio4)) #create a matrix with 95CI
> CI95_bio4_ou[,1] <- anc_ou_bio4$State - anc_ou_bio4$SE #first column lower limit
> CI95_bio4_ou[,2] <- anc_ou_bio4$State + anc_ou_bio4$SE #second column upper limit
> row.names(CI95_bio4_ou) <- anc_ou_bio4$nodo1 #node1 as row.names
> anc_ou_bio4_to_plot = list() #bind all
> anc_ou_bio4_to_plot[["ace"]] <- ace_bio4_ou
> anc_ou_bio4_to_plot[["CI95"]] <- CI95_bio4_ou
> 
> #create the tree interpolated
> obj_ou_bio4 = contMap(tree_prunned_to_plot, bio4_vector_to_plot, method="user", anc.states=anc_ou_bio4_to_plot$ace, plot=FALSE, lwd = 2) #aquí anc.states is a file with only ace, without 95CI.
> 
> #open the pdf of the plot
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/plot_anc/plot_ancestral_states_ou_bio4.pdf", width = 24, height = 24)
> 
> #plot
> plot(obj_ou_bio4, type="fan", fsize=c(2.5, 2.3)) #fsize tiene el primer valor del tamaño de las tip labels, el segundo es para la legenda.
> 
> #add the error bars
> errorbar_contMap_modified(obj=obj_ou_bio4, user=TRUE, anc.states=anc_ou_bio4_to_plot, scale.by.ci=TRUE) #aquí anc.states is the complete file with ace and 95CI.
>     #scale.by.ci=TRUE: that determines whether or not the length of the error bars will be scaled by the CI width
> dev.off()
pdf 
  2 
> 
> #plot for BM vs. OU comparison
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/plot_anc/anc_bio4_bm_ou.pdf", width = 24, height = 11)
> par(mfrow=c(1,2))
> plot(obj_bm_bio4, type="phylogram", fsize=c(1, 2.3), xlim=c(-10,155), ftype="off",offset = 2.2)
> plot(obj_ou_bio4, type="phylogram", fsize=c(1, 2.3), xlim=c(-20,155), ftype="off", direction="leftwards") #fsize tiene el primer valor del tamaño de las tip labels, el segundo es para la legenda.
> dev.off()
pdf 
  2 
> 
> 
> ##BM bio17
> #create a vector with the variable and species names as "P. XXXXX", similar to the tip.labels of tree_prunned_to_plot
> summary(names(bio17_vector) == paste("Pinus_", climate_medians$species, sep="")) #before check that the order of the species names from climate_medians and bio17_vector is the same. 
   Mode    TRUE 
logical     112 
> bio17_vector_to_plot = bio17_vector #copy the vector of the trait
> names(bio17_vector_to_plot) <- paste("P. ", climate_medians$species, sep="") #add reduced names
> 
> #open the pdf of the plot
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/plot_anc/plot_ancestral_states_bm_bio17.pdf", width = 24, height = 24)
> 
> #create the tree interpolated
> obj_bm_bio17 = contMap(tree_prunned_to_plot, bio17_vector_to_plot, method="user", anc.states=pgls_recon_bio17$ace, plot=FALSE, lwd = 2, res=10) #aquí anc.states is a file with only ace, without 95CI.
> 
> #plot
> plot(obj_bm_bio17, type="fan", fsize=c(2.5, 2.3)) #fsize tiene el primer valor del tamaño de las tip labels, el segundo es para la legenda.
> 
> #add the error bars
> errorbar_contMap_modified(obj=obj_bm_bio17, user=TRUE, anc.states=pgls_recon_bio17, scale.by.ci=TRUE) #aquí anc.states is the complete file with ace and 95CI.
>     #scale.by.ci=TRUE: that determines whether or not the length of the error bars will be scaled by the CI width
> dev.off()
pdf 
  2 
> 
> 
> ##OU bio17
> #create a vector with the variable and species names as "P. XXXXX", similar to the tip.labels of tree_prunned_to_plot
> summary(names(bio17_vector) == paste("Pinus_", climate_medians$species, sep="")) #before check that the order of the species names from climate_medians and bio17_vector is the same. 
   Mode    TRUE 
logical     112 
> bio17_vector_to_plot = bio17_vector #copy the vector of the trait
> names(bio17_vector_to_plot) <- paste("P. ", climate_medians$species, sep="") #add reduced names
> 
> #create a list with ancestral state and CI95 of OU to plot
> ace_bio17_ou = anc_ou_bio17$State #extract acenstral state
> names(ace_bio17_ou) <- anc_ou_bio17$nodo1 #set names as node1
> CI95_bio17_ou = matrix(NA, ncol=2, nrow=nrow(anc_ou_bio17)) #create a matrix with 95CI
> CI95_bio17_ou[,1] <- anc_ou_bio17$State - anc_ou_bio17$SE #first column lower limit
> CI95_bio17_ou[,2] <- anc_ou_bio17$State + anc_ou_bio17$SE #second column upper limit
> row.names(CI95_bio17_ou) <- anc_ou_bio17$nodo1 #node1 as row.names
> anc_ou_bio17_to_plot = list() #bind all
> anc_ou_bio17_to_plot[["ace"]] <- ace_bio17_ou
> anc_ou_bio17_to_plot[["CI95"]] <- CI95_bio17_ou
> 
> #create the tree interpolated
> obj_ou_bio17 = contMap(tree_prunned_to_plot, bio17_vector_to_plot, method="user", anc.states=anc_ou_bio17_to_plot$ace, plot=FALSE, lwd = 2) #aquí anc.states is a file with only ace, without 95CI.
> 
> #open the pdf of the plot
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/plot_anc/plot_ancestral_states_ou_bio17.pdf", width = 24, height = 24)
> 
> #plot
> plot(obj_ou_bio17, type="fan", fsize=c(2.5, 2.3)) #fsize tiene el primer valor del tamaño de las tip labels, el segundo es para la legenda.
> 
> #add the error bars
> errorbar_contMap_modified(obj=obj_ou_bio17, user=TRUE, anc.states=anc_ou_bio17_to_plot, scale.by.ci=TRUE) #aquí anc.states is the complete file with ace and 95CI.
  -----
  The range of the contMap object, presently (-762.5729,4.7969), should be equal to
  or greater than the range of the CIs on ancestral states: (-838.08,-124.89).
  To ensure that your error bars are correctly plotted, please recompute your
  contMap object and increase lims.
  -----
>     #scale.by.ci=TRUE: that determines whether or not the length of the error bars will be scaled by the CI width
> dev.off()
pdf 
  2 
> 
> #plot for BM vs. OU comparison
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/plot_anc/anc_bio17_bm_ou.pdf", width = 24, height = 11)
> par(mfrow=c(1,2))
> plot(obj_bm_bio17, type="phylogram", fsize=c(1.45, 2.3), xlim=c(-10,155), ftype="off", offset = 2.2)
> plot(obj_ou_bio17, type="phylogram", fsize=c(1.45, 2.3), xlim=c(-20,155), ftype="off", direction="leftwards") #fsize tiene el primer valor del tamaño de las tip labels, el segundo es para la legenda.
> dev.off()
pdf 
  2 
> 
> 
> #Si recuerdas estoy estimando el estado ancestral bajo BM usando la función ace de APE. Pues bien, los intervalos de confianza de la estimas son extremadamente diferentes entre tipos de ajuste. Según PGLS los intervalos son muuuy estrechos, mientras que para REML son mucho más amplios (anchura del intervalo de 10 unidades en PGLS frente 300 en REML; con ML no se pueden llegar a calcular). Te adjunto dos plots con el estado ancestral de bio17 bajo REML y PGLS, las barritas en cada nodo indican el 95CI. He probado a calcular los estado ancestrales con la otra función de APE para esto, reconstruct, la cual se diferencia de ace en que "computations are not performed by numerical optimisation but through matrix calculus", pero se pueden usar los mismos tipos de ajuste (ML, REML y PGLS). En este caso salen los intervalos amplios para los tres casos. Por tanto, los intervalos muuuy estrechos solo salen en PGLS con ace.
> #No he encontrado reconstrucciones con tan poca incertidumbre en ninguno de los ejemplos que tiene Revell por la red, esto unido al hecho de que no se replican las diferencias entre ajustes cuando se repite todo con "reconstruct", me hace tener muy poca seguridad para usar esos intervalos "estrechos". Ante esto hay cuatro opciones: 
>     #Usar solo los modelos con intervalos estrechos. No me fío de esos intervalos, el extremo del intervalo podría estar ahí ó mucho más lejos.  
>     #Usar los intervalos de confianza obtenidos con PGLS en reconstruct, ó con REML en cualquiera de las dos funciones (ace - reconstruct). Estos intervalos me dan algo más seguridad, pero al haber tanta incertidumbre (intervalos amplios) el valor actual de muchas especies va a caer dentro del intervalo y por tanto no se va a poder hacer corregir la idoneidad por la filogenia (si no tenemos certeza de que el valor actual se diferencie del valor del último nodo, la amplitud del rango filogenético es 0).
>     #Usar todos los modelos (intervalos amplios y estrechos). Creo que esto no tiene mucho sentido, porque si para los casos con intervalos amplios no se puede corregir la idoneidad de hábitat por la filogenia, sería como estar usando solo los estrechos.
>     #Calcular la media de los dos intervalos (REML vs PGLS). Si el extremo superior de ambos modelos es 500 y 300 respectivamente, el "consenso" sería 400. No me convence, porque no me da seguridad ningún intervalo, así que el consenso de ellos no debe ser muy fiable. Para eso, aunque ampliemos más el rango filo, prefiero la siguiente opción. 
>     #NO usar los intervalos de confianza de las reconstrucciones. Es una putada no usar medida de incertidumbre pero creo que es la mejor opción dada la poca seguridad que tenemos sobre las 95CI. He comparados los valores de cada nodo (sin intervalos) y son prácticamente iguales entre todos los modelos y funciones (ace - reconstruct). Solo hay discrepancia entre ML de ace con el resto, pero esa reconstrucción era muy mala (ni se estima el 95CI) y de hecho en el manual de ape se desaconseja usarla. Si tomamos esta opción, el rango filogenético iría desde el valor del último nodo (sin incluirlo) hasta el valor actual (incluyéndolo). 
> #Todo esto aplica para bio17, en el caso de bio4 hay menos diferencias entre PGLS y REML, pero estas siguen siendo grandes: Anchura del intervalo de 10 unidades frente a 150. Por tanto, no podemos tener certeza de cuales son los intervalos. 
> 
> 
> #############################################
> ####### Comparsion of ancestral states ######
> #############################################
> ### Comparison of OU in comapre with SE of intraespecific variation and BM in ace without intraespecific variation
> 
> #number of nodes
> nrow(anc_ou_bio4)
[1] 111
> nrow(anc_ou_bio17)
[1] 111
> nrow(pgls_recon_bio4$CI95)
[1] 111
> nrow(pgls_recon_bio17$CI95)
[1] 111
> 
> #check that the order of nodes is the same
> summary(anc_ou_bio4$nodo1 == row.names(pgls_recon_bio4$CI95))
   Mode    TRUE 
logical     111 
> summary(anc_ou_bio17$nodo1 == row.names(pgls_recon_bio17$CI95))
   Mode    TRUE 
logical     111 
> 
> ###bio4
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/comparison_bm_ou/comparsion_bm_ou_bio4.pdf")
> par(mfrow=c(2,2))
> 
> ##pannel 1
> #anc states  
> plot(anc_ou_bio4$State ~ pgls_recon_bio4$ace, xlab="Ancestral states under BM", ylab="Ancestral states under OU", main="")
> #cor between anc states
> spearman<-cor.test(anc_ou_bio4$State, pgls_recon_bio4$ace, method="spearman")
> mylabel = bquote(italic(rho) == .(format(spearman$estimate, digits = 3)))
> text(x=9500, y=5800, labels = mylabel, cex=1)
> if(!spearman$p.value == 0){ #if p.value is <2.2e-16, spearman save it as 0
+     mylabel.p = bquote(italic(p.value) == .(format(spearman$p.value, digits = 3)))
+ } else {
+     mylabel.p = bquote(italic(p.value) < .(format(2.2e-16)))
+ }
> text(x=9500, y=5500, labels = mylabel.p, cex=1)
> mylabel.t = bquote(italic(S) == .(format(spearman$statistic, digits = 3)))
> text(x=9500, y=5200, labels = mylabel.t, cex=1)
> 
> ##pannel 2
> if(FALSE){
+ #densitplot of differences between ancestral states
+     plot(density(abs(anc_ou_bio4$State - pgls_recon_bio4$ace)), main="Absolute difference ancestral states")
+     p<-wilcox.test(anc_ou_bio4$State, pgls_recon_bio4$ace)$p.value
+     mylabel.p = bquote(italic(p.value) == .(format(p, digits = 3)))
+     text(x=3000, y=0.0005, labels = mylabel.p, cex=1)
+ }
> 
> ##pannel 3
> #SE of OU versus CI95 of BM
> plot(anc_ou_bio4$SE~abs(pgls_recon_bio4$CI95[,1] - pgls_recon_bio4$CI95[,2]), xlab="Standard errors under BM", ylab="Standard errors under OU", main="")
> #cors
> spearman<-cor.test(anc_ou_bio4$SE, abs(pgls_recon_bio4$CI95[,1] - pgls_recon_bio4$CI95[,2]), method="spearman")
> mylabel = bquote(italic(rho) == .(format(spearman$estimate, digits = 3)))
> text(x=10, y=2700, labels = mylabel, cex=1)
> if(!spearman$p.value == 0){ #if p.value is <2.2e-16, spearman save it as 0
+     mylabel.p = bquote(italic(p.value) == .(format(spearman$p.value, digits = 3)))
+ } else {
+     mylabel.p = bquote(italic(p.value) < .(format(2.2e-16)))
+ }
> text(x=10, y=2400, labels = mylabel.p, cex=1)
> mylabel.t = bquote(italic(S) == .(format(spearman$statistic, digits = 3)))
> text(x=10, y=2100, labels = mylabel.t, cex=1)
> 
> 
> ##pannel 4
> if(FALSE){
+     #densitplot of differences between error of ancestral state estimates
+     plot(density(abs(anc_ou_bio4$SE - abs(pgls_recon_bio4$CI95[,1] - pgls_recon_bio4$CI95[,2]))), main="Absolute difference standard errors")
+     p<-wilcox.test(anc_ou_bio4$SE, abs(pgls_recon_bio4$CI95[,1] - pgls_recon_bio4$CI95[,2]))$p.value
+     mylabel.p = bquote(italic(p.value) == .(format(p, digits = 3)))
+     text(x=4800, y=0.0004, labels = mylabel.p, cex=1)
+ }
> dev.off()
pdf 
  2 
> 
> ###bio17
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/comparison_bm_ou/comparsion_bm_ou_bio17.pdf")
> par(mfrow=c(2,2))
> 
> ##pannel 1
> #anc states  
> plot(anc_ou_bio17$State ~ pgls_recon_bio17$ace, xlab="Ancestral states under BM", ylab="Ancestral states under OU", main="")
> #cor between anc states
> spearman<-cor.test(anc_ou_bio17$State, pgls_recon_bio17$ace, method="spearman")
> mylabel = bquote(italic(rho) == .(format(spearman$estimate, digits = 3)))
> text(x=-600, y=-300, labels = mylabel, cex=1)
> if(!spearman$p.value == 0){ #if p.value is <2.2e-16, spearman save it as 0
+     mylabel.p = bquote(italic(p.value) == .(format(spearman$p.value, digits = 3)))
+ } else {
+     mylabel.p = bquote(italic(p.value) < .(format(2.2e-16)))
+ }
> text(x=-600, y=-340, labels = mylabel.p, cex=1)
> mylabel.t = bquote(italic(S) == .(format(spearman$statistic, digits = 3)))
> text(x=-600, y=-380, labels = mylabel.t, cex=1)
> 
> ##pannel 2
> if(FALSE){
+     #densitplot of differences between ancestral states
+     plot(density(abs(anc_ou_bio17$State - pgls_recon_bio17$ace)), main="Absolute difference ancestral states")
+     p<-wilcox.test(anc_ou_bio17$State, pgls_recon_bio17$ace)$p.value
+     mylabel.p = bquote(italic(p.value) == .(format(p, digits = 3)))
+     text(x=100, y=0.02, labels = mylabel.p, cex=1)
+ } 
> 
> ##pannel 3
> #SE of OU versus CI95 of BM
> plot(anc_ou_bio17$SE~abs(pgls_recon_bio17$CI95[,1] - pgls_recon_bio17$CI95[,2]), xlab="Standard errors under BM", ylab="Standard errors under OU", main="")
> #cors
> spearman<-cor.test(anc_ou_bio17$SE, abs(pgls_recon_bio17$CI95[,1] - pgls_recon_bio17$CI95[,2]), method="spearman")
> mylabel = bquote(italic(rho) == .(format(spearman$estimate, digits = 3)))
> text(x=11, y=100, labels = mylabel, cex=1)
> if(!spearman$p.value == 0){ #if p.value is <2.2e-16, spearman save it as 0
+     mylabel.p = bquote(italic(p.value) == .(format(spearman$p.value, digits = 3)))
+ } else {
+     mylabel.p = bquote(italic(p.value) < .(format(2.2e-16)))
+ }
> text(x=11, y=85, labels = mylabel.p, cex=1)
> mylabel.t = bquote(italic(S) == .(format(spearman$statistic, digits = 3)))
> text(x=11, y=70, labels = mylabel.t, cex=1)
> 
> 
> ##pannel 4
> if(FALSE){
+     #densitplot of differences between error of ancestral state estimates
+     plot(density(abs(anc_ou_bio17$SE - abs(pgls_recon_bio17$CI95[,1] - pgls_recon_bio17$CI95[,2]))), main="Absolute difference standard errors")
+     p<-wilcox.test(anc_ou_bio17$SE, abs(pgls_recon_bio17$CI95[,1] - pgls_recon_bio17$CI95[,2]))$p.value
+     mylabel.p = bquote(italic(p.value) == .(format(p, digits = 3)))
+     text(x=230, y=0.008, labels = mylabel.p, cex=1)
+ }
> dev.off()
pdf 
  2 
> 
> ######Conclusions
> #Bio17: Como era de esperar por su valor de lambda tan alto (0.87), a penas muestra diferencias entre modelos. Los estados ancestrales están muy correlacionados (rho=0.975)  y no son significativamente diferentes (p = 0.6; panel 1 y 2). Los errores también están muy correlacionados, pero si hay diferencias entre modelos, siendo los errores de OU más grandes (esto creo que se debe más al programa [compare vs ace] que a los modelos). 
> #Bio4: En bio4 está la cosa un poco menos clara, lo cual es lógico viendo el valor de lambda no tan alto para esta variable (0.57). Sigue habiendo una correlación alta entre estados ancestrales (rho = 0.87), pero sí hay diferencias significativas entre modelos aunque con una p no muy baja (p = 0.03). Los errores de las estimaciones son significativamente muuucho más grandes en OU.
> #Yo creo que hay una correlación clara entre ambos modelos, se parecen mucho, y es lógico teniendo en cuenta los valores de lambda altos (sobre todo en bio17) y los valores de alfa tan bajos (0.076 para bio4 y 0.036 para bio17). Sin embargo, me preocupan un poco las diferencias en valor absoluto de los errores estándar para bio4, pero como los errores no se van a usar, solo los estados ancestrales, tampoco veo mucho problema. Voy a seguir para adelante con BM. en caso de que hubiese que dar marcha atrás no va a ser mucho problema de trabajo, solo un poquito de tiempo para correr de nuevo los análisis.
> #Lo DEJO TODO PREPARADO PARA USAR OU TAMBIÉN, PERO NO LO VOY A USAR EN LAS FIGURAS, DEJO ABIERTA LA OPCIÓN PARA MÁS ADELANTE. 
> 
> 
> #####################################
> ####### calculate phylo ranges ######
> #####################################
> 
> ## Usamos PGLS aunque tengan interalos de confianza raros para BM, como no veíamos un simulitud entre los interalos de los diferentes ajustes para BM pasamos de usar interalos y usamos solo los estados ancestrales, los cuales son muuy parecidos entre ajusted bajo BM y además son muuy parecidos entre OU y BM. 
> 
> ## Calculo los rangos para OU también pero no lo vamos a usar finalmente. 
> 
> 
> ## check that all files (from compare and ape) has the same order and names of nodes
> summary(anc_ou_bio4$nodo1 == names(pgls_recon_bio4$ace))
   Mode    TRUE 
logical     111 
> summary(anc_ou_bio17$nodo1 == names(pgls_recon_bio17$ace))
   Mode    TRUE 
logical     111 
> 
> #extract intial and final node of all branches
> ramas = as.data.frame(tree_prunned$edge)
> colnames(ramas) <- c("nodo1", "nodo2")
> 
> ## create a variable final nodes of each species 
> #select branch in which are implicate terminal nodes (speices)
> final_ramas = ramas[which(ramas$nodo2 %in% 1:length(epithet_species_list)),]
> #reoder tree labels in basis on nodo2 positions
> species_ramas = tree_prunned$tip.label[final_ramas$nodo2]
> #bind
> final_ramas = cbind.data.frame(final_ramas, species_ramas)
> 
> ## check that each node2 has the correct species name
> summary(names(bio17_vector)[final_ramas$nodo2] == final_ramas$species_ramas) #all true
   Mode    TRUE 
logical     112 
> 
> #plot the tree to check that each pair of species in the plot correspond with species with the same nodo1
> pdf("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/final_recons/FBDl_big_names", width=12, height=16)
> plot(tree_prunned)
> dev.off()
pdf 
  2 
> 
> ## create a new data.frame with current values of climate variables to merge with ancestral data
> climate_medians_merge = climate_medians
> climate_medians_merge$species = paste("Pinus_", climate_medians_merge$species, sep="")
> colnames(climate_medians_merge)[which(colnames(climate_medians_merge) == "species")] <- "species_ramas"
> climate_medians_merge_bio4 = climate_medians_merge[,which(colnames(climate_medians_merge) %in% c("species_ramas", "median_bio4"))]
> climate_medians_merge_bio17 = climate_medians_merge[,which(colnames(climate_medians_merge) %in% c("species_ramas", "median_bio17"))]
> 
> 
> #### bind final ramas with ancestral reconstructions from OU (compare) ####
> ## merge species names and anc data
> final_anc_ou_bio4 = merge(final_ramas, anc_ou_bio4, by="nodo1")
> final_anc_ou_bio17 = merge(final_ramas, anc_ou_bio17, by="nodo1")
> 
> ## check that each node has the correct ancestral value comparing with the raw data.frame of ancestrla reconstructions
> summary(anc_ou_bio4[which(anc_ou_bio4$nodo1 %in% final_anc_ou_bio4$nodo1),]$State == final_anc_ou_bio4[which(!duplicated(final_anc_ou_bio4$nodo1)),]$State)
   Mode    TRUE 
logical      77 
> summary(anc_ou_bio17[which(anc_ou_bio17$nodo1 %in% final_anc_ou_bio17$nodo1),]$State == final_anc_ou_bio17[which(!duplicated(final_anc_ou_bio17$nodo1)),]$State)
   Mode    TRUE 
logical      77 
> 
> ## additional check to test if species that share the last node have the same ancestral state for bio4
> 
> #which species had duplicated nodes (i.e. share their last node with another species)
> duplicated_nodo1 = which(duplicated(final_anc_ou_bio4$nodo1))
> 
> #bind the row number of species duplicated and their pairs (they are the previous row). Then sort the rows
> species_pairs = sort(c(duplicated_nodo1-1, duplicated_nodo1))
> 
> #for each pair, sequence from the 1 to the total number of species with paris (selecting X and X+1)
> test_bio4 = NULL
> for(i in seq(1, length(species_pairs), 2)){
+ 
+     #extract the state of the first species of the pair
+     state_first_species = final_anc_ou_bio4[species_pairs[i],]$State
+ 
+     #extract the state of the second species of the pair
+     state_second_species = final_anc_ou_bio4[species_pairs[i+1],]$State
+ 
+     #check that both share the nodo1
+     print(final_anc_ou_bio4[species_pairs[i],]$nodo1 == final_anc_ou_bio4[species_pairs[i+1],]$nodo1)
+ 
+     #test the existence of differences of ancestral state between them
+     test_bio4 = append(test_bio4, state_first_species == state_second_species)
+ }
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
> length(test_bio4) == length(duplicated_nodo1)
[1] TRUE
> summary(test_bio4)
   Mode    TRUE 
logical      35 
> 
> #for each pair, sequence from the 1 to the total number of species with paris (selecting X and X+1)
> test_bio17 = NULL
> for(i in seq(1, length(species_pairs), 2)){
+ 
+     #extract the state of the first species of the pair
+     state_first_species = final_anc_ou_bio4[species_pairs[i],]$State
+ 
+     #extract the state of the second species of the pair
+     state_second_species = final_anc_ou_bio4[species_pairs[i+1],]$State
+ 
+     #check that both share the nodo1
+     print(final_anc_ou_bio4[species_pairs[i],]$nodo1 == final_anc_ou_bio4[species_pairs[i+1],]$nodo1)
+ 
+     #test the existence of differences of ancestral state between them
+     test_bio17 = append(test_bio17, state_first_species == state_second_species)
+ }
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
> length(test_bio17) == length(duplicated_nodo1)
[1] TRUE
> summary(test_bio17)
   Mode    TRUE 
logical      35 
> 
> ## bind current climatic data
> final_anc_ou_bio4 = merge(final_anc_ou_bio4, climate_medians_merge_bio4, by="species_ramas")
> final_anc_ou_bio17 = merge(final_anc_ou_bio17, climate_medians_merge_bio17, by="species_ramas")
> row.names(final_anc_ou_bio4) == final_anc_ou_bio4$nodo2
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[106] TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> row.names(final_anc_ou_bio17) == final_anc_ou_bio17$nodo2
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[106] TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> 
> 
> ## check that current value is added correctly
> summary(climate_medians_merge[match(climate_medians_merge$species_ramas, final_anc_ou_bio17$species_ramas),]$species_ramas == final_anc_ou_bio17$species_ramas)
   Mode    TRUE 
logical     112 
> summary(climate_medians_merge[match(climate_medians_merge$species_ramas, final_anc_ou_bio4$species_ramas),]$species_ramas == final_anc_ou_bio4$species_ramas)
   Mode    TRUE 
logical     112 
> 
> ## reorder columns and set new col names
> #bio4
> final_anc_ou_bio4 = final_anc_ou_bio4[,c(1,3,7,2,4,5,6)]
> colnames(final_anc_ou_bio4) <- c("species", "node_species", "current_value", "node_antecesor", "ace", "SE", "Adj.SE")
> str(final_anc_ou_bio4)
'data.frame':	112 obs. of  7 variables:
 $ species       : Factor w/ 112 levels "Pinus_albicaulis",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ node_species  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ current_value : num  8086 7168 8340 5290 6825 ...
 $ node_antecesor: int  121 127 143 162 127 175 134 142 197 126 ...
 $ ace           : num  6968 6859 6328 5608 6859 ...
 $ SE            : num  3132 2282 4291 1599 2282 ...
 $ Adj.SE        : num  706 687 602 697 687 ...
> head(final_anc_ou_bio4, 10)
             species node_species current_value node_antecesor     ace      SE
1   Pinus_albicaulis            1      8085.529            121 6967.65 3132.26
2     Pinus_amamiana            2      7168.106            127 6859.42 2282.18
3     Pinus_aristata            3      8339.682            143 6328.05 4290.87
4    Pinus_arizonica            4      5289.677            162 5608.28 1599.48
5     Pinus_armandii            5      6825.137            127 6859.42 2282.18
6    Pinus_attenuata            6      6299.896            175 5979.99 3731.97
7   Pinus_ayacahuite            7      1665.350            134 6032.98 2233.04
8  Pinus_balfouriana            8      6682.370            142 6262.59 4669.32
9    Pinus_banksiana            9     13336.401            197 6357.28 4899.74
10   Pinus_bhutanica           10      5084.777            126 6971.76 2266.40
   Adj.SE
1  706.39
2  686.56
3  601.87
4  696.69
5  686.56
6  624.46
7  886.72
8  560.49
9  564.98
10 714.14
> #bio17
> final_anc_ou_bio17 = final_anc_ou_bio17[,c(1,3,7,2,4,5,6)]
> colnames(final_anc_ou_bio17) <- c("species", "node_species", "current_value", "node_antecesor", "ace", "SE", "Adj.SE")
> str(final_anc_ou_bio17)
'data.frame':	112 obs. of  7 variables:
 $ species       : Factor w/ 112 levels "Pinus_albicaulis",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ node_species  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ current_value : num  -524.4 -31.9 -585 -584.3 -281.4 ...
 $ node_antecesor: int  121 127 143 162 127 175 134 142 197 126 ...
 $ ace           : num  -392 -322 -621 -593 -322 ...
 $ SE            : num  117.3 85.4 174.4 61 85.4 ...
 $ Adj.SE        : num  99.8 96.8 116.1 133.4 96.8 ...
> head(final_anc_ou_bio17, 10)
             species node_species current_value node_antecesor     ace     SE
1   Pinus_albicaulis            1    -524.36160            121 -391.95 117.34
2     Pinus_amamiana            2     -31.94881            127 -322.35  85.41
3     Pinus_aristata            3    -585.03253            143 -621.04 174.38
4    Pinus_arizonica            4    -584.28711            162 -593.26  61.03
5     Pinus_armandii            5    -281.42302            127 -322.35  85.41
6    Pinus_attenuata            6    -718.38971            175 -540.22 142.52
7   Pinus_ayacahuite            7    -526.02573            134 -541.76  85.22
8  Pinus_balfouriana            8    -716.09262            142 -617.37 200.89
9    Pinus_banksiana            9    -376.20815            197 -411.30 223.51
10   Pinus_bhutanica           10    -345.47359            126 -324.53  82.13
   Adj.SE
1   99.83
2   96.75
3  116.07
4  133.43
5   96.75
6  119.22
7  125.22
8  100.60
9  111.62
10  91.81
> 
> #### bind final ramas with ancestral reconstructions from BM (ape) ####
> ##bio4
> #Bind node number,95CI and ace,
> final_anc_bm_bio4 = cbind.data.frame(row.names(pgls_recon_bio4$CI95), pgls_recon_bio4$ace, pgls_recon_bio4$CI95)
> colnames(final_anc_bm_bio4) <- c("nodo1", "State", "low_bound", "upper_bound")
> #merge anc data with species names
> final_anc_bm_bio4 = merge(final_ramas, final_anc_bm_bio4, by="nodo1")
> #reorder rows in basis on node numbers
> final_anc_bm_bio4 = final_anc_bm_bio4[order(final_anc_bm_bio4$nodo1, decreasing=FALSE),]
> #check that the anc data has been correctly extraced
> summary(final_anc_bm_bio4[which(!duplicated(final_anc_bm_bio4$nodo1)),c(5,6)] == pgls_recon_bio4$CI95[which(row.names(pgls_recon_bio4$CI95) %in% final_ramas$nodo1),])
 low_bound      upper_bound   
 Mode:logical   Mode:logical  
 TRUE:77        TRUE:77       
> #add current values
> final_anc_bm_bio4 = merge(final_anc_bm_bio4, climate_medians_merge_bio4, by="species_ramas")
> #check that current value is added correctly
> summary(climate_medians_merge[match(final_anc_bm_bio4$species_ramas, climate_medians_merge$species_ramas),]$species_ramas == final_anc_bm_bio4$species_ramas)
   Mode    TRUE 
logical     112 
> #reorder final data
> final_anc_bm_bio4 = final_anc_bm_bio4[,c(1,3,7,2,4,5,6)]
> colnames(final_anc_bm_bio4) = c("species", "node_species", "current_value", "node_antecesor", "ace", "ace_low_bound", "ace_upper_bound")
> str(final_anc_bm_bio4)
'data.frame':	112 obs. of  7 variables:
 $ species        : Factor w/ 112 levels "Pinus_albicaulis",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ node_species   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ current_value  : num  8086 7168 8340 5290 6825 ...
 $ node_antecesor : int  121 127 143 162 127 175 134 142 197 126 ...
 $ ace            : num  8093 6497 7750 4689 6497 ...
 $ ace_low_bound  : num  8090 6495 7746 4687 6495 ...
 $ ace_upper_bound: num  8096 6499 7754 4690 6499 ...
> head(final_anc_bm_bio4, 20)
             species node_species current_value node_antecesor       ace
1   Pinus_albicaulis            1      8085.529            121  8093.203
2     Pinus_amamiana            2      7168.106            127  6496.947
3     Pinus_aristata            3      8339.682            143  7749.865
4    Pinus_arizonica            4      5289.677            162  4688.637
5     Pinus_armandii            5      6825.137            127  6496.947
6    Pinus_attenuata            6      6299.896            175  6107.527
7   Pinus_ayacahuite            7      1665.350            134  5015.274
8  Pinus_balfouriana            8      6682.370            142  7097.028
9    Pinus_banksiana            9     13336.401            197  8903.363
10   Pinus_bhutanica           10      5084.777            126  5932.899
11      Pinus_brutia           11      7489.441            203  6735.538
12    Pinus_bungeana           12      9841.437            139  8227.990
13 Pinus_canariensis           13      2854.512            206  5202.638
14    Pinus_caribaea           14      1473.683            183  3056.883
15      Pinus_cembra           15      7421.956            132 11594.046
16  Pinus_cembroides           16      5430.950            147  5773.145
17  Pinus_chiapensis           17      1675.757            136  6026.071
18      Pinus_clausa           18      5713.287            199  7685.906
19    Pinus_contorta           19      8962.649            199  7685.906
20     Pinus_cooperi           20      3940.676            162  4688.637
   ace_low_bound ace_upper_bound
1       8090.334        8096.072
2       6494.820        6499.074
3       7745.696        7754.035
4       4687.088        4690.185
5       6494.820        6499.074
6       6104.108        6110.946
7       5013.136        5017.412
8       7092.236        7101.820
9       8898.005        8908.722
10      5930.911        5934.886
11      6730.511        6740.566
12      8223.815        8232.165
13      5198.043        5207.232
14      3054.220        3059.546
15     11591.745       11596.348
16      5770.280        5776.011
17      6023.033        6029.108
18      7682.076        7689.737
19      7682.076        7689.737
20      4687.088        4690.185
> 
> ##bio17
> #Bind node number,95CI and ace,
> final_anc_bm_bio17 = cbind.data.frame(row.names(pgls_recon_bio17$CI95), pgls_recon_bio17$ace, pgls_recon_bio17$CI95)
> colnames(final_anc_bm_bio17) <- c("nodo1", "State", "low_bound", "upper_bound")
> #merge anc data with species names
> final_anc_bm_bio17 = merge(final_ramas, final_anc_bm_bio17, by="nodo1")
> #reorder rows in basis on node numbers
> final_anc_bm_bio17 = final_anc_bm_bio17[order(final_anc_bm_bio17$nodo1, decreasing=FALSE),]
> #check that the anc data has been correctly extraced
> summary(final_anc_bm_bio17[which(!duplicated(final_anc_bm_bio17$nodo1)),c(5,6)] == pgls_recon_bio17$CI95[which(row.names(pgls_recon_bio17$CI95) %in% final_ramas$nodo1),])
 low_bound      upper_bound   
 Mode:logical   Mode:logical  
 TRUE:77        TRUE:77       
> #add current values
> final_anc_bm_bio17 = merge(final_anc_bm_bio17, climate_medians_merge_bio17, by="species_ramas")
> #check that current value is added correctly
> summary(climate_medians_merge[match(final_anc_bm_bio17$species_ramas, climate_medians_merge$species_ramas),]$species_ramas == final_anc_bm_bio17$species_ramas)
   Mode    TRUE 
logical     112 
> #reorder final data
> final_anc_bm_bio17 = final_anc_bm_bio17[,c(1,3,7,2,4,5,6)]
> colnames(final_anc_bm_bio17) = c("species", "node_species", "current_value", "node_antecesor", "ace", "ace_low_bound", "ace_upper_bound")
> str(final_anc_bm_bio17)
'data.frame':	112 obs. of  7 variables:
 $ species        : Factor w/ 112 levels "Pinus_albicaulis",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ node_species   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ current_value  : num  -524.4 -31.9 -585 -584.3 -281.4 ...
 $ node_antecesor : int  121 127 143 162 127 175 134 142 197 126 ...
 $ ace            : num  -371 -213 -652 -588 -213 ...
 $ ace_low_bound  : num  -374 -215 -656 -590 -215 ...
 $ ace_upper_bound: num  -368 -211 -648 -587 -211 ...
> head(final_anc_bm_bio17, 20)
             species node_species current_value node_antecesor       ace
1   Pinus_albicaulis            1    -524.36160            121 -371.1432
2     Pinus_amamiana            2     -31.94881            127 -212.8863
3     Pinus_aristata            3    -585.03253            143 -651.8639
4    Pinus_arizonica            4    -584.28711            162 -588.2760
5     Pinus_armandii            5    -281.42302            127 -212.8863
6    Pinus_attenuata            6    -718.38971            175 -566.4878
7   Pinus_ayacahuite            7    -526.02573            134 -567.1336
8  Pinus_balfouriana            8    -716.09262            142 -651.5916
9    Pinus_banksiana            9    -376.20815            197 -402.7037
10   Pinus_bhutanica           10    -345.47359            126 -276.3270
11      Pinus_brutia           11    -693.96463            203 -661.0327
12    Pinus_bungeana           12    -421.48578            139 -454.4085
13 Pinus_canariensis           13    -759.31219            206 -613.0975
14    Pinus_caribaea           14    -462.23969            183 -503.5488
15      Pinus_cembra           15    -302.77298            132 -345.5062
16  Pinus_cembroides           16    -585.35046            147 -582.2999
17  Pinus_chiapensis           17    -475.28383            136 -422.5942
18      Pinus_clausa           18    -350.12158            199 -390.0638
19    Pinus_contorta           19    -434.48843            199 -390.0638
20     Pinus_cooperi           20    -589.47095            162 -588.2760
   ace_low_bound ace_upper_bound
1      -374.0123       -368.2741
2      -215.0135       -210.7591
3      -656.0333       -647.6946
4      -589.8245       -586.7276
5      -215.0135       -210.7591
6      -569.9065       -563.0690
7      -569.2718       -564.9955
8      -656.3836       -646.7996
9      -408.0620       -397.3453
10     -278.3145       -274.3395
11     -666.0600       -656.0054
12     -458.5836       -450.2334
13     -617.6920       -608.5029
14     -506.2122       -500.8854
15     -347.8079       -343.2045
16     -585.1653       -579.4345
17     -425.6315       -419.5569
18     -393.8946       -386.2331
19     -393.8946       -386.2331
20     -589.8245       -586.7276
> 
> 
> ## additional check to test if species that share the last node have the same ancestral state for bio4
> 
> #which species had duplicated nodes (i.e. share their last node with another species)
> duplicated_nodo1 = which(duplicated(final_anc_bm_bio4$node_antecesor))
> 
> #for each pair
> test_bio4_bm = NULL
> for(i in 1:length(duplicated_nodo1)){
+ 
+     #select the second species
+     second_species = final_anc_bm_bio4[duplicated_nodo1[i],]
+ 
+     #select the first species
+     first_species = final_anc_bm_bio4[which(final_anc_bm_bio4$node_antecesor == second_species$node_antecesor)[1],]
+ 
+     #check that the ace and CI intervals are the same
+     test_bio4_bm = append(test_bio4_bm, ifelse(first_species$ace == second_species$ace & first_species$ace_low_bound == second_species$ace_low_bound & first_species$ace_upper_bound == second_species$ace_upper_bound, TRUE, FALSE))
+ }
> length(test_bio4_bm) == length(duplicated_nodo1)
[1] TRUE
> summary(test_bio4_bm)
   Mode    TRUE 
logical      35 
> 
> ## additional check to test if species that share the last node have the same ancestral state for bio17
> 
> #which species had duplicated nodes (i.e. share their last node with another species)
> duplicated_nodo1 = which(duplicated(final_anc_bm_bio17$node_antecesor))
> 
> #bind the row number of species duplicated and their pairs (they are the previous row). Then sort the rows
> species_pairs = sort(c(duplicated_nodo1-1, duplicated_nodo1))
> 
> #for each pair
> test_bio17_bm = NULL
> for(i in 1:length(duplicated_nodo1)){
+ 
+     #select the second species
+     second_species = final_anc_bm_bio17[duplicated_nodo1[i],]
+ 
+     #select the first species
+     first_species = final_anc_bm_bio17[which(final_anc_bm_bio17$node_antecesor == second_species$node_antecesor)[1],]
+ 
+     #check that the ace and CI intervals are the same
+     test_bio17_bm = append(test_bio17_bm, ifelse(first_species$ace == second_species$ace & first_species$ace_low_bound == second_species$ace_low_bound & first_species$ace_upper_bound == second_species$ace_upper_bound, TRUE, FALSE))
+ }
> length(test_bio17_bm) == length(duplicated_nodo1)
[1] TRUE
> summary(test_bio17_bm)
   Mode    TRUE 
logical      35 
> 
> 
> #### adittional check of correct selection of ancestral state per node #####
> ## bio4
> #BM
> raw_anc_bm_bio4 = pgls_recon_bio4$CI95[which(row.names(pgls_recon_bio4$CI95) %in% final_anc_bm_bio4$node_antecesor),] #select nodes of species from raw dataset
> test_results_anc_bm_bio4 = NULL
> test_results_current_bm_bio4 = NULL
> for(i in 1:length(final_anc_bm_bio4$species)){
+ 
+     #selected node
+     selected_species = final_anc_bm_bio4$species[i]
+ 
+     #select the row
+     selected_row_final_data = final_anc_bm_bio4[which(final_anc_bm_bio4$species == selected_species),]
+ 
+     #extract anc state from final data.set 
+     anc_final_dataset = selected_row_final_data[,which(colnames(final_anc_bm_bio4) %in% c("ace_low_bound", "ace_upper_bound"))]
+ 
+     #extract anc state from raw data.set     
+     anc_raw_dataset = raw_anc_bm_bio4[which(row.names(raw_anc_bm_bio4) == selected_row_final_data$node_antecesor),]
+ 
+     #test anc
+     test_results_anc_bm_bio4 = append(test_results_anc_bm_bio4, anc_final_dataset == anc_raw_dataset)
+ 
+     #extract current state from final data.set
+     current_final_dataset = selected_row_final_data[, which(colnames(final_anc_bm_bio4) %in% c("species", "current_value"))]
+     
+     #extract current state from raw data.set
+     current_raw_dataset = as.vector(bio4_vector[which(names(bio4_vector) == current_final_dataset$species)])
+ 
+     #test current state
+     test_results_current_bm_bio4 = append(test_results_current_bm_bio4, current_final_dataset$current_value == current_raw_dataset)
+ }
> length(test_results_anc_bm_bio4) == 112*2 #two limits per species (95CI of anc test)
[1] TRUE
> length(test_results_current_bm_bio4) == 112 #one current value per species
[1] TRUE
> 
> 
> #OU
> raw_anc_ou_bio4 = anc_ou_bio4[which(anc_ou_bio4$nodo1 %in% final_anc_ou_bio4$node_antecesor),] #select nodes of species from raw dataset
> test_results_anc_ou_bio4 = NULL
> test_results_current_ou_bio4 = NULL
> for(i in 1:length(final_anc_ou_bio4$species)){
+ 
+     #selected node
+     selected_species = final_anc_ou_bio4$species[i]
+ 
+     #select the row
+     selected_row_final_data = final_anc_ou_bio4[which(final_anc_ou_bio4$species == selected_species),]
+ 
+     #extract anc state from final data.set 
+     anc_final_dataset = selected_row_final_data[,which(colnames(final_anc_ou_bio4) %in% c("ace", "SE", "Adj.SE"))]
+ 
+     #extract anc state from raw data.set     
+     anc_raw_dataset = raw_anc_ou_bio4[which(raw_anc_ou_bio4$nodo1 == selected_row_final_data$node_antecesor), which(colnames(raw_anc_ou_bio4) %in% c("State", "SE", "Adj.SE"))]
+ 
+     #test anc
+     test_results_anc_ou_bio4 = append(test_results_anc_ou_bio4, anc_final_dataset == anc_raw_dataset)
+ 
+     #extract current state from final data.set
+     current_final_dataset = selected_row_final_data[, which(colnames(final_anc_ou_bio4) %in% c("species", "current_value"))]
+     
+     #extract current state from raw data.set
+     current_raw_dataset = as.vector(bio4_vector[which(names(bio4_vector) == current_final_dataset$species)])
+ 
+     #test current state
+     test_results_current_ou_bio4 = append(test_results_current_ou_bio4, current_final_dataset$current_value == current_raw_dataset)
+ }
> length(test_results_anc_ou_bio4) == 112*3 #two SE varaibles (SE and Adj.SE) per species and one ace (anc test)
[1] TRUE
> length(test_results_current_bm_bio4) == 112 #one current value per species
[1] TRUE
> 
> 
> ## bio17
> #BM
> raw_anc_bm_bio17 = pgls_recon_bio17$CI95[which(row.names(pgls_recon_bio17$CI95) %in% final_anc_bm_bio17$node_antecesor),] #select nodes of species from raw dataset
> test_results_anc_bm_bio17 = NULL
> test_results_current_bm_bio17 = NULL
> for(i in 1:length(final_anc_bm_bio17$species)){
+ 
+     #selected node
+     selected_species = final_anc_bm_bio17$species[i]
+ 
+     #select the row
+     selected_row_final_data = final_anc_bm_bio17[which(final_anc_bm_bio17$species == selected_species),]
+ 
+     #extract anc state from final data.set 
+     anc_final_dataset = selected_row_final_data[,which(colnames(final_anc_bm_bio17) %in% c("ace_low_bound", "ace_upper_bound"))]
+ 
+     #extract anc state from raw data.set     
+     anc_raw_dataset = raw_anc_bm_bio17[which(row.names(raw_anc_bm_bio17) == selected_row_final_data$node_antecesor),]
+ 
+     #test anc
+     test_results_anc_bm_bio17 = append(test_results_anc_bm_bio17, anc_final_dataset == anc_raw_dataset)
+ 
+     #extract current state from final data.set
+     current_final_dataset = selected_row_final_data[, which(colnames(final_anc_bm_bio17) %in% c("species", "current_value"))]
+     
+     #extract current state from raw data.set
+     current_raw_dataset = as.vector(bio17_vector[which(names(bio17_vector) == current_final_dataset$species)])
+ 
+     #test current state
+     test_results_current_bm_bio17 = append(test_results_current_bm_bio17, current_final_dataset$current_value == current_raw_dataset)
+ }
> length(test_results_anc_bm_bio17) == 112*2 #two limits per species (95CI of anc test)
[1] TRUE
> length(test_results_current_bm_bio17) == 112 #one current value per species
[1] TRUE
> 
> 
> #OU
> raw_anc_ou_bio17 = anc_ou_bio17[which(anc_ou_bio17$nodo1 %in% final_anc_ou_bio17$node_antecesor),] #select nodes of species from raw dataset
> test_results_anc_ou_bio17 = NULL
> test_results_current_ou_bio17 = NULL
> for(i in 1:length(final_anc_ou_bio17$species)){
+ 
+     #selected node
+     selected_species = final_anc_ou_bio17$species[i]
+ 
+     #select the row
+     selected_row_final_data = final_anc_ou_bio17[which(final_anc_ou_bio17$species == selected_species),]
+ 
+     #extract anc state from final data.set 
+     anc_final_dataset = selected_row_final_data[,which(colnames(final_anc_ou_bio17) %in% c("ace", "SE", "Adj.SE"))]
+ 
+     #extract anc state from raw data.set     
+     anc_raw_dataset = raw_anc_ou_bio17[which(raw_anc_ou_bio17$nodo1 == selected_row_final_data$node_antecesor), which(colnames(raw_anc_ou_bio17) %in% c("State", "SE", "Adj.SE"))]
+ 
+     #test anc
+     test_results_anc_ou_bio17 = append(test_results_anc_ou_bio17, anc_final_dataset == anc_raw_dataset)
+ 
+     #extract current state from final data.set
+     current_final_dataset = selected_row_final_data[, which(colnames(final_anc_ou_bio17) %in% c("species", "current_value"))]
+     
+     #extract current state from raw data.set
+     current_raw_dataset = as.vector(bio17_vector[which(names(bio17_vector) == current_final_dataset$species)])
+ 
+     #test current state
+     test_results_current_ou_bio17 = append(test_results_current_ou_bio17, current_final_dataset$current_value == current_raw_dataset)
+ }
> length(test_results_anc_ou_bio17) == 112*3 #two SE varaibles (SE and Adj.SE) per species and one ace (anc test)
[1] TRUE
> length(test_results_current_bm_bio17) == 112 #one current value per species
[1] TRUE
> 
> #summary
> summary(test_results_anc_bm_bio4)
   Mode    TRUE 
logical     224 
> summary(test_results_current_bm_bio4)
   Mode    TRUE 
logical     112 
> summary(test_results_anc_ou_bio4)
   Mode    TRUE 
logical     336 
> summary(test_results_current_bm_bio4)
   Mode    TRUE 
logical     112 
> summary(test_results_anc_bm_bio17)
   Mode    TRUE 
logical     224 
> summary(test_results_current_bm_bio17)
   Mode    TRUE 
logical     112 
> summary(test_results_anc_ou_bio17)
   Mode    TRUE 
logical     336 
> summary(test_results_current_bm_bio17) #ALL test correct, GO ON!
   Mode    TRUE 
logical     112 
> 
> #### Final dataset  ####
> str(final_anc_ou_bio4)
'data.frame':	112 obs. of  7 variables:
 $ species       : Factor w/ 112 levels "Pinus_albicaulis",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ node_species  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ current_value : num  8086 7168 8340 5290 6825 ...
 $ node_antecesor: int  121 127 143 162 127 175 134 142 197 126 ...
 $ ace           : num  6968 6859 6328 5608 6859 ...
 $ SE            : num  3132 2282 4291 1599 2282 ...
 $ Adj.SE        : num  706 687 602 697 687 ...
> head(final_anc_ou_bio4, 20)
             species node_species current_value node_antecesor     ace      SE
1   Pinus_albicaulis            1      8085.529            121 6967.65 3132.26
2     Pinus_amamiana            2      7168.106            127 6859.42 2282.18
3     Pinus_aristata            3      8339.682            143 6328.05 4290.87
4    Pinus_arizonica            4      5289.677            162 5608.28 1599.48
5     Pinus_armandii            5      6825.137            127 6859.42 2282.18
6    Pinus_attenuata            6      6299.896            175 5979.99 3731.97
7   Pinus_ayacahuite            7      1665.350            134 6032.98 2233.04
8  Pinus_balfouriana            8      6682.370            142 6262.59 4669.32
9    Pinus_banksiana            9     13336.401            197 6357.28 4899.74
10   Pinus_bhutanica           10      5084.777            126 6971.76 2266.40
11      Pinus_brutia           11      7489.441            203 6212.44 4696.00
12    Pinus_bungeana           12      9841.437            139 6319.83 4291.36
13 Pinus_canariensis           13      2854.512            206 6143.62 4655.86
14    Pinus_caribaea           14      1473.683            183 4937.85 3051.43
15      Pinus_cembra           15      7421.956            132 7836.39 2520.86
16  Pinus_cembroides           16      5430.950            147 6166.62 3239.52
17  Pinus_chiapensis           17      1675.757            136 6217.45 3224.25
18      Pinus_clausa           18      5713.287            199 6331.91 3967.35
19    Pinus_contorta           19      8962.649            199 6331.91 3967.35
20     Pinus_cooperi           20      3940.676            162 5608.28 1599.48
   Adj.SE
1  706.39
2  686.56
3  601.87
4  696.69
5  686.56
6  624.46
7  886.72
8  560.49
9  564.98
10 714.14
11 623.11
12 567.02
13 548.53
14 791.95
15 877.79
16 650.66
17 742.06
18 587.27
19 587.27
20 696.69
> str(final_anc_ou_bio17)
'data.frame':	112 obs. of  7 variables:
 $ species       : Factor w/ 112 levels "Pinus_albicaulis",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ node_species  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ current_value : num  -524.4 -31.9 -585 -584.3 -281.4 ...
 $ node_antecesor: int  121 127 143 162 127 175 134 142 197 126 ...
 $ ace           : num  -392 -322 -621 -593 -322 ...
 $ SE            : num  117.3 85.4 174.4 61 85.4 ...
 $ Adj.SE        : num  99.8 96.8 116.1 133.4 96.8 ...
> head(final_anc_ou_bio17, 20)
             species node_species current_value node_antecesor     ace     SE
1   Pinus_albicaulis            1    -524.36160            121 -391.95 117.34
2     Pinus_amamiana            2     -31.94881            127 -322.35  85.41
3     Pinus_aristata            3    -585.03253            143 -621.04 174.38
4    Pinus_arizonica            4    -584.28711            162 -593.26  61.03
5     Pinus_armandii            5    -281.42302            127 -322.35  85.41
6    Pinus_attenuata            6    -718.38971            175 -540.22 142.52
7   Pinus_ayacahuite            7    -526.02573            134 -541.76  85.22
8  Pinus_balfouriana            8    -716.09262            142 -617.37 200.89
9    Pinus_banksiana            9    -376.20815            197 -411.30 223.51
10   Pinus_bhutanica           10    -345.47359            126 -324.53  82.13
11      Pinus_brutia           11    -693.96463            203 -588.20 206.13
12    Pinus_bungeana           12    -421.48578            139 -470.83 174.21
13 Pinus_canariensis           13    -759.31219            206 -555.36 197.04
14    Pinus_caribaea           14    -462.23969            183 -487.27 110.88
15      Pinus_cembra           15    -302.77298            132 -348.25  93.53
16  Pinus_cembroides           16    -585.35046            147 -599.89 120.16
17  Pinus_chiapensis           17    -475.28383            136 -411.46 123.57
18      Pinus_clausa           18    -350.12158            199 -407.75 158.07
19    Pinus_contorta           19    -434.48843            199 -407.75 158.07
20     Pinus_cooperi           20    -589.47095            162 -593.26  61.03
   Adj.SE
1   99.83
2   96.75
3  116.07
4  133.43
5   96.75
6  119.22
7  125.22
8  100.60
9  111.62
10  91.81
11  98.83
12  99.70
13  87.79
14  90.49
15 131.64
16 112.31
17 155.50
18 129.98
19 129.98
20 133.43
> str(final_anc_bm_bio4)
'data.frame':	112 obs. of  7 variables:
 $ species        : Factor w/ 112 levels "Pinus_albicaulis",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ node_species   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ current_value  : num  8086 7168 8340 5290 6825 ...
 $ node_antecesor : int  121 127 143 162 127 175 134 142 197 126 ...
 $ ace            : num  8093 6497 7750 4689 6497 ...
 $ ace_low_bound  : num  8090 6495 7746 4687 6495 ...
 $ ace_upper_bound: num  8096 6499 7754 4690 6499 ...
> head(final_anc_bm_bio4, 20)
             species node_species current_value node_antecesor       ace
1   Pinus_albicaulis            1      8085.529            121  8093.203
2     Pinus_amamiana            2      7168.106            127  6496.947
3     Pinus_aristata            3      8339.682            143  7749.865
4    Pinus_arizonica            4      5289.677            162  4688.637
5     Pinus_armandii            5      6825.137            127  6496.947
6    Pinus_attenuata            6      6299.896            175  6107.527
7   Pinus_ayacahuite            7      1665.350            134  5015.274
8  Pinus_balfouriana            8      6682.370            142  7097.028
9    Pinus_banksiana            9     13336.401            197  8903.363
10   Pinus_bhutanica           10      5084.777            126  5932.899
11      Pinus_brutia           11      7489.441            203  6735.538
12    Pinus_bungeana           12      9841.437            139  8227.990
13 Pinus_canariensis           13      2854.512            206  5202.638
14    Pinus_caribaea           14      1473.683            183  3056.883
15      Pinus_cembra           15      7421.956            132 11594.046
16  Pinus_cembroides           16      5430.950            147  5773.145
17  Pinus_chiapensis           17      1675.757            136  6026.071
18      Pinus_clausa           18      5713.287            199  7685.906
19    Pinus_contorta           19      8962.649            199  7685.906
20     Pinus_cooperi           20      3940.676            162  4688.637
   ace_low_bound ace_upper_bound
1       8090.334        8096.072
2       6494.820        6499.074
3       7745.696        7754.035
4       4687.088        4690.185
5       6494.820        6499.074
6       6104.108        6110.946
7       5013.136        5017.412
8       7092.236        7101.820
9       8898.005        8908.722
10      5930.911        5934.886
11      6730.511        6740.566
12      8223.815        8232.165
13      5198.043        5207.232
14      3054.220        3059.546
15     11591.745       11596.348
16      5770.280        5776.011
17      6023.033        6029.108
18      7682.076        7689.737
19      7682.076        7689.737
20      4687.088        4690.185
> str(final_anc_bm_bio17)
'data.frame':	112 obs. of  7 variables:
 $ species        : Factor w/ 112 levels "Pinus_albicaulis",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ node_species   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ current_value  : num  -524.4 -31.9 -585 -584.3 -281.4 ...
 $ node_antecesor : int  121 127 143 162 127 175 134 142 197 126 ...
 $ ace            : num  -371 -213 -652 -588 -213 ...
 $ ace_low_bound  : num  -374 -215 -656 -590 -215 ...
 $ ace_upper_bound: num  -368 -211 -648 -587 -211 ...
> head(final_anc_bm_bio17, 20)
             species node_species current_value node_antecesor       ace
1   Pinus_albicaulis            1    -524.36160            121 -371.1432
2     Pinus_amamiana            2     -31.94881            127 -212.8863
3     Pinus_aristata            3    -585.03253            143 -651.8639
4    Pinus_arizonica            4    -584.28711            162 -588.2760
5     Pinus_armandii            5    -281.42302            127 -212.8863
6    Pinus_attenuata            6    -718.38971            175 -566.4878
7   Pinus_ayacahuite            7    -526.02573            134 -567.1336
8  Pinus_balfouriana            8    -716.09262            142 -651.5916
9    Pinus_banksiana            9    -376.20815            197 -402.7037
10   Pinus_bhutanica           10    -345.47359            126 -276.3270
11      Pinus_brutia           11    -693.96463            203 -661.0327
12    Pinus_bungeana           12    -421.48578            139 -454.4085
13 Pinus_canariensis           13    -759.31219            206 -613.0975
14    Pinus_caribaea           14    -462.23969            183 -503.5488
15      Pinus_cembra           15    -302.77298            132 -345.5062
16  Pinus_cembroides           16    -585.35046            147 -582.2999
17  Pinus_chiapensis           17    -475.28383            136 -422.5942
18      Pinus_clausa           18    -350.12158            199 -390.0638
19    Pinus_contorta           19    -434.48843            199 -390.0638
20     Pinus_cooperi           20    -589.47095            162 -588.2760
   ace_low_bound ace_upper_bound
1      -374.0123       -368.2741
2      -215.0135       -210.7591
3      -656.0333       -647.6946
4      -589.8245       -586.7276
5      -215.0135       -210.7591
6      -569.9065       -563.0690
7      -569.2718       -564.9955
8      -656.3836       -646.7996
9      -408.0620       -397.3453
10     -278.3145       -274.3395
11     -666.0600       -656.0054
12     -458.5836       -450.2334
13     -617.6920       -608.5029
14     -506.2122       -500.8854
15     -347.8079       -343.2045
16     -585.1653       -579.4345
17     -425.6315       -419.5569
18     -393.8946       -386.2331
19     -393.8946       -386.2331
20     -589.8245       -586.7276
> 
> ## save it
> write.table(final_anc_ou_bio4, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/final_recons/final_anc_ou_bio4.csv", sep=",", col.names = TRUE, row.names = FALSE)
> write.table(final_anc_ou_bio17, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/final_recons/final_anc_ou_bio17.csv", sep=",", col.names = TRUE, row.names = FALSE)
> write.table(final_anc_bm_bio4, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/final_recons/final_anc_bm_bio4.csv", sep=",", col.names = TRUE, row.names = FALSE)
> write.table(final_anc_bm_bio17, "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/final_recons/final_anc_bm_bio17.csv", sep=",", col.names = TRUE, row.names = FALSE)
> 
> ## NOTA: SI HUBIERA QUE COGER EL ESTADO ANCESTRAL EN UNA MISMA FECHA PARA TODAS LAS ESPECIES ANTES DEL ÚLTIMO NODO RESIVA LA FUNCIÓN CONTMAP DE PHYTOOLS, DE AHÍ PUEDES SACAR EL CÓDIGO PARA HACERLO. Mira en "/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/code/phylo/contmap_phytools.R". Si no te aclaras mira este tutoria ("http://www.phytools.org/eqg/Exercise_5.2/"), la parte del traitgram. 
> 
> #save image
> save.image("/Volumes/GoogleDrive/My Drive/science/phd/nicho_pinus/results/phylo_reconstruction/rdata/tests_phylo.RData")
> 
> proc.time()
    user   system  elapsed 
5001.486  494.530 2421.350 
